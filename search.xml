<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ProxmoxVE技巧：关闭订阅通知“无有效订阅”</title>
      <link href="/gb4bsg/"/>
      <url>/gb4bsg/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Proxmox VE 技巧：关闭订阅通知“无有效订阅”<br>author: hongwei<br>top: false<br>cover: false<br>coverImg: /medias/featureimages/6.jpg<br>toc: true<br>mathjax: false<br>summary:  Proxmox VE 是一个集成OPENVZ 支持KVM应用的虚拟化环境。支持集群、HA、模板等功能。<br>categories:</p><ul><li>Proxmox VE</li></ul><p>tags:</p><ul><li>pve</li><li>虚拟化</li><li>QEMU</li><li>KVM</li><li>LXC</li></ul><p>urlname: proxmox-ve-cancel-subscription </p><p>date: 2020-01-05 11:05:46</p><p>img:</p><p>password:</p><p>updated:</p><hr><p><a name="52e9675e"></a></p><h1 id="版本和软件"><a href="#版本和软件" class="headerlink" title="版本和软件"></a>版本和软件</h1><ul><li>Virtual Environment 6.1-3</li><li><code>putty</code> 或 PVE自带的 Shell 或 MobaXterm 或 xshell 等工具</li></ul><p><a name="2312baeb"></a></p><h1 id="关闭订阅通知"><a href="#关闭订阅通知" class="headerlink" title="关闭订阅通知"></a>关闭订阅通知</h1><p>每次登陆都有订阅通知，使用不方便，直接关掉</p><p>此方法可能在升级pve后失效，失效后再修改即可</p><p><a name="759a710f"></a></p><h2 id="一步到位"><a href="#一步到位" class="headerlink" title="一步到位"></a>一步到位</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sed</span> -i.bak <span class="token string">"s/data.status !== 'Active'/false/g"</span> /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js <span class="token operator">&amp;&amp;</span> systemctl restart pveproxy.service</code></pre><p>注销登陆，CTRL+F5强制刷新网页，或清理一下浏览器的缓存就好了，再次登陆，发现已经不再弹窗让你订阅啦。</p><p><a name="accdbc0a"></a></p><h2 id="分步操作"><a href="#分步操作" class="headerlink" title="分步操作"></a>分步操作</h2><ol><li>进入目录</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/share/javascript/proxmox-widget-toolkit</code></pre><ol start="2"><li>备份</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> proxmoxlib.js proxmoxlib.js.bak</code></pre><ol start="3"><li>打开配置文件 proxmoxlib.js</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> proxmoxlib.js</code></pre><ol start="2"><li>搜索关键字 data.status</li></ol><pre class=" language-bash"><code class="language-bash">/data.status</code></pre><ol start="3"><li>找到内容</li></ol><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>data.status<span class="token operator">!=</span><span class="token operator">=</span><span class="token string">'Active'</span><span class="token punctuation">)</span><span class="token punctuation">{</span></code></pre><ol start="4"><li>修改内容为</li></ol><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">{</span></code></pre><p>即 <code>data.status!==&#39;Active&#39;</code> 更改为 <code>false</code><br />5. 重启网页服务</p><pre class=" language-bash"><code class="language-bash">systemctl restart pveproxy</code></pre><ol start="6"><li>保存后注销登陆，CTRL+F5强制刷新网页，或清理一下浏览器的缓存就好了，再次登陆，发现已经不再弹窗让你订阅啦。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于 Docker 的 Django 容器化部署之三：定时备份，两步实现服务器迁移</title>
      <link href="/django-docker-backup-restore/"/>
      <url>/django-docker-backup-restore/</url>
      
        <content type="html"><![CDATA[<p>本文章为原创内容，只发布于 <a href="https://blog.csdn.net/z_johnny/article/details/104914845" target="_blank" rel="noopener">CSDN 博客</a> 和 <a href="https://www.zhwei.cn/">我的私人博客</a>，转载请注明，谢谢</p><hr><p>基于 Docker 的 Django 容器化部署教程分为三部分，当前所在的是第三部分</p><ul><li><a href="https://www.zhwei.cn/django-docker-images">基于 Docker 的 Django 容器化部署之一：定制属于自己的 docker 镜像</a></li><li><a href="https://www.zhwei.cn/django-docker-compose-deploy">基于 Docker 的 Django 容器化部署之二：docker-compose 部署 Django 项目</a></li><li><a href="https://www.zhwei.cn/django-docker-backup-restore">基于 Docker 的 Django 容器化部署之三：定时备份，两步实现服务器迁移</a></li></ul><p>在 <code>Django</code> 博客进行 <code>Docker</code> 容器化之后，所需要的就是定时备份功能，能够将数据随时迁移到任何地方，毕竟容器化进行部署需要的就是轻量和易用。</p><p>既然备份了就要能够恢复数据，这样在迁移的时候，就可以保证数据不会丢失。</p><p>看了这个教程，简单几个命令就可以实现无损迁移项目。</p><p><a name="ba311d8a"></a></p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>自己编写的 <code>shell</code> 脚本 <code>migrate.sh</code> 功能：</p><ul><li>自动备份</li><li>自动清理</li><li>自动恢复</li><li>自动设置备份规则</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>mysql_db<span class="token operator">=</span>hw_mysqlmysql_table<span class="token operator">=</span>websitemysql_username<span class="token operator">=</span>rootmysql_password<span class="token operator">=</span>zhwei.cnmeida_dir<span class="token operator">=</span>./django/mediabackup_dir<span class="token operator">=</span>./backupbackup_dir_date<span class="token operator">=</span><span class="token variable">${backup_dir}</span>/<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d<span class="token variable">`</span></span>backup_date<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d-%H%M<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\nUsage: migrate [-b] [-c] [-r &lt;*.sql.gz> &lt;*.tar.gz>] [-t &lt;\"0 3 * * *\">]\n"</span>    <span class="token keyword">echo</span> <span class="token string">"  -b,   backup mysql and media"</span>    <span class="token keyword">echo</span> <span class="token string">"  -c,   clean old-to-date backup"</span>    <span class="token keyword">echo</span> <span class="token string">"  -r,   restore mysql and media"</span>    <span class="token keyword">echo</span> -e <span class="token string">"  -t,   set cron schedule expressions\n"</span><span class="token keyword">fi</span><span class="token keyword">while</span> <span class="token function">getopts</span> :bcr:t: opt<span class="token keyword">do</span>    <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>        b<span class="token punctuation">)</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n-----  Current start Backup  -----"</span>        <span class="token keyword">echo</span> <span class="token string">"1. mkdir backup filedir: <span class="token variable">${backup_dir_date}</span>"</span>        <span class="token function">mkdir</span> -p <span class="token variable">${backup_dir_date}</span>        <span class="token keyword">echo</span> <span class="token string">"2. Backup MySQL to <span class="token variable">${backup_dir_date}</span>"</span>        docker <span class="token function">exec</span> <span class="token variable">${mysql_db}</span> /usr/bin/mysqldump -u <span class="token variable">${mysql_username}</span> --password<span class="token operator">=</span><span class="token variable">${mysql_password}</span> <span class="token variable">${mysql_table}</span> <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">></span> <span class="token variable">${backup_dir_date}</span>/website-<span class="token variable">${backup_date}</span>.sql.gz        <span class="token keyword">echo</span> <span class="token string">"3. Backup media to <span class="token variable">${backup_dir_date}</span>"</span>        <span class="token function">tar</span> -zcvf  <span class="token variable">${backup_dir_date}</span>/media-<span class="token variable">${backup_date}</span>.tar.gz <span class="token variable">${meida_dir}</span>        <span class="token keyword">echo</span> -e <span class="token string">"-----  Backup Success!  -----\n"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>        c<span class="token punctuation">)</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n-----  Current start Clean  -----"</span>        <span class="token keyword">echo</span> <span class="token string">"1. Remove old-to-date website-*.sql"</span>        <span class="token function">find</span> <span class="token variable">${backup_dir}</span> -mtime +1 -name <span class="token string">"*.sql.gz"</span> -exec <span class="token function">rm</span> -rf <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"2. Remove old-to-date media-*.tar.gz"</span>        <span class="token function">find</span> <span class="token variable">${backup_dir}</span> -mtime +1 -name <span class="token string">"*.tar.gz"</span> -exec <span class="token function">rm</span> -rf <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"3. Remove empty filedir"</span>        <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> $<span class="token punctuation">{</span>backup_dir<span class="token punctuation">}</span> -empty<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">find</span> <span class="token variable">${backup_dir}</span> -empty <span class="token operator">|</span> <span class="token function">xargs</span> -i <span class="token function">rm</span> -r <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">done</span>        <span class="token keyword">echo</span> -e <span class="token string">"-----  Clean Success!  -----\n"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>        r<span class="token punctuation">)</span>        backup_sql<span class="token operator">=</span><span class="token variable">$2</span>        backup_meida<span class="token operator">=</span><span class="token variable">$3</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n-----  Current start Restore  -----"</span>         <span class="token keyword">echo</span> <span class="token string">"1. Unzip <span class="token variable">${backup_sql}</span>"</span>        <span class="token function">gzip</span> -cd <span class="token variable">${backup_sql}</span> <span class="token operator">></span> <span class="token variable">${backup_sql%.*}</span>         <span class="token keyword">echo</span> <span class="token string">"2. Restore MySQL Databases"</span>        <span class="token function">cat</span> <span class="token variable">${backup_sql%.*}</span> <span class="token operator">|</span> docker <span class="token function">exec</span> -i <span class="token variable">${mysql_db}</span> /usr/bin/mysql -u <span class="token variable">${mysql_username}</span> --password<span class="token operator">=</span><span class="token variable">${mysql_password}</span> <span class="token variable">${mysql_table}</span>        <span class="token keyword">echo</span> <span class="token string">"3. Restore Media File"</span>        <span class="token function">tar</span> -zxvf <span class="token variable">${backup_meida}</span>        <span class="token keyword">echo</span> -e <span class="token string">"-----  Restore Done!  -----\n"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>          t<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"        <span class="token variable">$2</span><span class="token variable">$3</span><span class="token variable">$4</span><span class="token variable">$5</span><span class="token variable">$6</span> cd <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span> &amp;&amp; sh migrate.sh -b -c        "</span> <span class="token operator">>></span> /var/spool/cron/root        <span class="token keyword">echo</span> <span class="token string">"Like crontab -e. Set cron schedule expressions: <span class="token variable">$2</span><span class="token variable">$3</span><span class="token variable">$4</span><span class="token variable">$5</span><span class="token variable">$6</span>"</span>        <span class="token keyword">echo</span> <span class="token string">"Command：cd <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span> &amp;&amp; sh migrate.sh -b -c"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>                 ?<span class="token punctuation">)</span>        <span class="token keyword">echo</span> -e <span class="token string">"\nUsage: migrate [-b] [-c] [-r &lt;*.sql.gz> &lt;*.tar.gz>] [-t &lt;\"0 3 * * *\">]\n"</span>        <span class="token keyword">echo</span> <span class="token string">"  -b,   backup mysql and media"</span>        <span class="token keyword">echo</span> <span class="token string">"  -c,   clean old-to-date backup"</span>        <span class="token keyword">echo</span> <span class="token string">"  -r,   restore mysql and media"</span>        <span class="token keyword">echo</span> -e <span class="token string">"  -t,   set cron schedule expressions\n"</span>        <span class="token keyword">exit</span> 1    esac<span class="token keyword">done</span></code></pre><p><a name="ec09647d"></a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class=" language-bash"><code class="language-bash">Usage: migrate <span class="token punctuation">[</span>-b<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>-r <span class="token operator">&lt;</span>*.sql.gz<span class="token operator">></span> <span class="token operator">&lt;</span>*.tar.gz<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-t <span class="token operator">&lt;</span><span class="token string">"0 3 * * *"</span><span class="token operator">></span><span class="token punctuation">]</span>  -b,   backup mysql and media  -c,   clean old-to-date backup  -r,   restore mysql and media  -t,   <span class="token keyword">set</span> <span class="token function">cron</span> schedule expressions</code></pre><ul><li><code>sh migrate -b</code> 开始备份</li><li><code>sh migrate -c</code> 开始清理旧文件</li><li><code>sh migrate -r *.sql.gz *.tar.gz</code> 开始恢复，注意顺序</li><li><code>sh migrate -t &quot;0 3 * * *&quot;</code> 定时备份规则</li></ul><p><a name="664b37da"></a></p><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>从我的 <code>Django</code> 项目来看，我要迁移的数据无非就是这两个</p><ol><li><code>MySQL</code> 数据库的备份</li><li><code>media</code> 媒体文件，图片、视频、音乐之类的</li></ol><p><a name="2b6bc0f2"></a></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><pre class=" language-bash"><code class="language-bash">sh migrate -b</code></pre><p>如果脚本保持默认，即将 <code>MySQL备份（*.sql.gz）</code> 和 <code>media备份（*.tar.gz）</code> 存入 <code>backup/****-**-**/文件夹中</code>，请按需修改</p><p><a name="767fa455"></a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>└── backup/    ├── 2019-12-11/    │   ├── media-20191211-1235.tar.gz    │   └── website-20191211-1235.sql.gz    ├── 2019-12-12/    │   ├── media-20191212-0326.tar.gz    │   └── website-20191212-0326.sql.gz    └── 2019-12-13/        ├── media-20191213-1624.tar.gz        └── website-20191213-1624.sql.gz</code></pre><p><a name="e47bb1cd"></a></p><h1 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h1><p>因为定时备份会占用很大的硬盘空间，而硬盘空间又是有限的，所以要定时清理，当前默认只保存3天的备份</p><pre class=" language-bash"><code class="language-bash">sh migrate -c</code></pre><p><a name="f3e3c5f1"></a></p><h1 id="开启定时备份"><a href="#开启定时备份" class="headerlink" title="开启定时备份"></a>开启定时备份</h1><p>我使用的是 <code>Linux</code> 自带的 <code>crontab</code> 定时任务。</p><p>定时备份是一个好习惯，不要等到了服务器崩了的时候再去备份，那样可能会很麻烦。</p><p>以下操作 <strong>需要使用 <code>root</code> 用户</strong></p><pre class=" language-bash"><code class="language-bash">sh migrate -t <span class="token string">"0 3 * * *"</span></code></pre><ul><li>“0 3 _ _ *” 是备份的周期，表示每天凌晨3点备份一次，参考时间规则查询网站：<a href="https://crontab.guru/" target="_blank" rel="noopener">crontab guru</a></li></ul><p>原理：</p><ol><li>输入<code>crontab -e</code></li><li>添加内容：<code>0 3 * * * cd 目录 &amp;&amp; sh migrate.sh -b -c</code></li><li>保存退出</li></ol><p><a name="d56d3332"></a></p><h2 id="crontab命令查询"><a href="#crontab命令查询" class="headerlink" title="crontab命令查询"></a>crontab命令查询</h2><ol><li>查看当前用户的定时任务</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">crontab</span> -l</code></pre><ol start="2"><li>检查 <code>cron</code> 服务是不是在运行</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> crond status<span class="token punctuation">[</span>root@localhost blogtest<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service crond status</span>Redirecting to /bin/systemctl status crond.service● crond.service - Command Scheduler   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/crond.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since 五 2019-12-06 15:42:39 CST<span class="token punctuation">;</span> 1 weeks 2 days ago Main PID: 30726 <span class="token punctuation">(</span>crond<span class="token punctuation">)</span>    Tasks: 1   Memory: 1.2M   CGroup: /system.slice/crond.service           └─30726 /usr/sbin/crond -n12月 16 10:12:01 localhost.localdomain crond<span class="token punctuation">[</span>30726<span class="token punctuation">]</span>: <span class="token punctuation">(</span>root<span class="token punctuation">)</span> RELOAD <span class="token punctuation">(</span>/var/spool/cron/root<span class="token punctuation">)</span><span class="token punctuation">..</span>.</code></pre><ol start="3"><li><code>cron</code> 不在运行启动服务</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> <span class="token function">cron</span> start</code></pre><ol start="4"><li>查看定时任务日志执行信息</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">tail</span> -f /var/log/cron</code></pre><p><a name="ee1f5c80"></a></p><h1 id="备份文件的导出和导入"><a href="#备份文件的导出和导入" class="headerlink" title="备份文件的导出和导入"></a>备份文件的导出和导入</h1><p><a name="55405ea6"></a></p><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>手动导出或者利用 <code>e-mail</code> 将备份文件定时发到自己邮箱，这个按需使用吧，<code>基于Python的邮件模块</code>可以参考我的 <a href="https://github.com/hongweifuture/HwTTK/tree/master/HwSendEmail" target="_blank" rel="noopener">基于Python的邮件发送模块封装</a>，只要配置邮箱基本信息就可发送。</p><p><a name="8d9a071e"></a></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><ol><li>放在项目根目录，<code>sql</code> 无所谓，但 <code>media</code> 还是要的，所以干脆都放相同目录</li><li>项目容器运行，可用 <code>docker-compose ps</code> 查看</li></ol><p>目录：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── django├── migrate.sh├── docker-compose.yml├── media-20191212-0326.tar.gz├── nginx└── website-20191212-0326.sql.gz</code></pre><p><a name="c7db6d4f"></a></p><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p>在一台新服务器上恢复项目，只需安装 <code>docker</code> 和 <code>docker-compose</code> 后，运行容器，恢复数据，即可完成迁移的全部工作</p><pre class=" language-bash"><code class="language-bash">sh migrate -r *.sql.gz *.tar.gz</code></pre><p>自动 <code>导入sql文件</code> 和 <code>解压静态媒体文件</code></p><p>好了，<code>导入文件</code>，<code>恢复SQL和mdeia</code>，<strong>两步</strong>就完成了服务器的迁移，用的了五分钟？那在导入文件的时间一定用了四分五十九秒~~</p><p>就这样，神奇的事情发生了，一切数据全部保留~ enjoy~~</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> mysql </tag>
            
            <tag> docker-compose </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Docker 的 Django 容器化部署之二：docker-compose 部署 Django 博客</title>
      <link href="/django-docker-compose-deploy/"/>
      <url>/django-docker-compose-deploy/</url>
      
        <content type="html"><![CDATA[<p>本文章为原创内容，只发布于 <a href="https://blog.csdn.net/z_johnny/article/details/104914845" target="_blank" rel="noopener">CSDN 博客</a> 和 <a href="https://www.zhwei.cn/">我的私人博客</a>，转载请注明，谢谢</p><hr><p>基于 Docker 的 Django 容器化部署教程分为三部分，当前所在的是第二部分</p><ul><li><a href="https://www.zhwei.cn/django-docker-images">基于 Docker 的 Django 容器化部署之一：定制属于自己的 docker 镜像</a></li><li><a href="https://www.zhwei.cn/django-docker-compose-deploy">基于 Docker 的 Django 容器化部署之二：docker-compose 部署 Django 项目</a></li><li><a href="https://www.zhwei.cn/django-docker-backup-restore">基于 Docker 的 Django 容器化部署之三：定时备份，两步实现服务器迁移</a></li></ul><p><a name="docker-compose"></a></p><h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h1><p><code>Docker Compose</code> 是 <code>docker</code> 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 <code>Compose</code>，我们可以通过 <code>YAML</code> 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。简单来说，就是用来编排多个容器，将启动容器的命令统一写到 <code>docker-compose.yml</code> 文件中，一次启动全部启动。</p><p>前面我们已经定制了我们自己的 <code>django</code> 博客镜像，我们还要用到 <code>mysql</code> 和 <code>nginx</code> 镜像，这些仓库都提供了官方镜像，我们直接使用就好了，如果你还有其他需求，基本上仓库中都有，只有我们定制的内容需要手动打包构建镜像。</p><p>编排如何使用这几个镜像就用到了 <code>docker-compose</code></p><p><a name="82791202"></a></p><h1 id="Docker-Compose模板文件说明"><a href="#Docker-Compose模板文件说明" class="headerlink" title="Docker-Compose模板文件说明"></a>Docker-Compose模板文件说明</h1><p>Compose 允许用户通过一个 <code>docker-compose.yml</code> 模板文件（<code>YAML</code> 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p>Compose 模板文件是一个定义<code>服务、网络和卷的 YAML 文件</code>。Compose 模板文件默认路径是当前目录下的 <code>docker-compose.yml</code>，可以使用 <code>.yml</code> 或 <code>.yaml</code> 作为文件扩展名。</p><p>Docker-Compose 标准模板文件应该包含 <code>version</code>、<code>services</code>、<code>networks</code> 三大部分，最关键的是 <code>services</code> 和 <code>networks</code> 两个部分。</p><p>先来看一下 <code>docker-compose.yml</code>，无论用的是上一章中的哪一个镜像，都适用</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Compose文件格式版本，3这是最新版本。</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token comment" spellcheck="true"># 服务，主要用来整合容器，表明之间的关系</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">website</span><span class="token punctuation">:</span>                         <span class="token comment" spellcheck="true"># 服务名称</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> hw<span class="token punctuation">-</span>website              <span class="token comment" spellcheck="true"># 默认为 latest 最新版 指定服务使用的镜像名称，hw-website 代表标签为 latest 的最新版</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> hw_django      <span class="token comment" spellcheck="true"># 指定容器的名字</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always                    <span class="token key atrule">expose</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true"># 映射端口给其他容器，不会将端口暴露给主机</span>      <span class="token punctuation">-</span> <span class="token string">"7000"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true"># 挂载卷，实现了宿主机和容器目录的映射</span>      <span class="token punctuation">-</span> ./django<span class="token punctuation">:</span>/opt/hw<span class="token punctuation">-</span>blog    <span class="token comment" spellcheck="true"># 尽可能把命令规划好，都写在这里</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> bash <span class="token punctuation">-</span>c "python manage.py collectstatic <span class="token punctuation">-</span><span class="token punctuation">-</span>noinput &amp;&amp; python manage.py makemigrations &amp;&amp; python manage.py migrate &amp;&amp; python manage.py rebuild_index <span class="token punctuation">-</span><span class="token punctuation">-</span>noinput &amp;&amp; gunicorn <span class="token punctuation">-</span><span class="token punctuation">-</span>timeout=30 <span class="token punctuation">-</span><span class="token punctuation">-</span>workers=4 <span class="token punctuation">-</span><span class="token punctuation">-</span>bind <span class="token punctuation">:</span>7000 website.wsgi<span class="token punctuation">:</span>application"    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql    <span class="token key atrule">networks</span><span class="token punctuation">:</span>                      <span class="token comment" spellcheck="true"># 下面定义了一个网络，使得三个容器在同一个网络中</span>      <span class="token punctuation">-</span> django_network  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7               </span><span class="token comment" spellcheck="true"># 使用 5.7 版本的 mysql 镜像</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> hw_mysql    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">expose</span><span class="token punctuation">:</span>                               <span class="token punctuation">-</span> <span class="token string">"3306"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mysql<span class="token punctuation">:</span>/var/lib/mysql    <span class="token comment" spellcheck="true"># MySQL的基本配置，可以写成文件形式，再进行磁盘映射</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> mysqld <span class="token punctuation">-</span><span class="token punctuation">-</span>explicit_defaults_for_timestamp=true <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4 <span class="token punctuation">-</span><span class="token punctuation">-</span>collation<span class="token punctuation">-</span>server=utf8mb4_unicode_ci <span class="token punctuation">-</span><span class="token punctuation">-</span>init<span class="token punctuation">-</span>connect='SET NAMES utf8mb4;'    <span class="token key atrule">environment</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 环境变量</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=zhwei.cn      <span class="token punctuation">-</span> MYSQL_DATABASE=website    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> django_network  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> hw_nginx    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>                         <span class="token comment" spellcheck="true"># 映射端口给其他容器，会将端口暴露给主机</span>      <span class="token punctuation">-</span> <span class="token string">"9000:8000"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true"># nginx 处理 static 和 media，挂载 nginx 配置参数</span>      <span class="token punctuation">-</span> ./django/static<span class="token punctuation">:</span>/opt/hw<span class="token punctuation">-</span>blog/static      <span class="token punctuation">-</span> ./django/media<span class="token punctuation">:</span>/opt/hw<span class="token punctuation">-</span>blog/media      <span class="token punctuation">-</span> ./nginx<span class="token punctuation">:</span>/etc/nginx/conf.d    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> website    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> django_network<span class="token key atrule">networks</span><span class="token punctuation">:</span>                          <span class="token comment" spellcheck="true"># 定义网络，只有在相同的网络之中才能进行通讯。</span>  <span class="token key atrule">django_network</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge</code></pre><blockquote><p>Gunicorn是一个unix上被广泛使用的高性能的Python WSGI UNIX HTTP Server。<br>和大多数的web框架兼容，并具有实现简单，轻量级，高性能等特点。</p></blockquote><ul><li><p>参考 <a href="https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/gunicorn/" target="_blank" rel="noopener">How to use Django with Gunicorn</a> 和 <a href="https://docs.gunicorn.org/en/latest/run.html" target="_blank" rel="noopener">gunicorn documentation</a></p></li><li><p>version: Compose文件格式版本，3这是最新版本。参考 <a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">Compose file version 3 reference</a></p></li></ul><p><a name="d865572d"></a></p><h1 id="ngixn-相关配置"><a href="#ngixn-相关配置" class="headerlink" title="ngixn 相关配置"></a>ngixn 相关配置</h1><p>模板文件中的 <code>mysql</code> 我是直接配置了，其实是可以写成配置文件形式的，再进行挂载，就像下面我要说的 <code>nginx</code> 配置一样</p><p><code>nginx</code> 的默认配置文件 <code>/etc/nginx/nginx.conf</code> 里的 <code>http</code> 块下有这么一句话 <code>include /etc/nginx/conf.d/*.conf;</code>，说明我们可以自定义配置文件，而且还可以分拆配置</p><p>所以我们要进行配置文件自定义来对模板文件进行适配</p><p>在项目根目录创建 <code>nginx</code> 文件夹，文件夹内创建 <code>django.conf</code> 配置文件</p><pre class=" language-conf"><code class="language-conf">server {    listen 8000;    server_name localhost;    # 配置 docker-compose.yml 中挂载的 static     location /static/ {        autoindex on;        alias /opt/hw-blog/static/;    }    # 配置 docker-compose.yml 中挂载的 media    location /media/ {        autoindex on;        alias /opt/hw-blog/media/;    }    # 拦截所有请求 服务转发 端口需要一致    location / {        proxy_pass http://website:7000;        proxy_set_header Host $host; #header添加请求host信息        proxy_set_header X-Real-IP $remote_addr; # header增加请求来源IP信息        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 增加代理记录    }}</code></pre><p>流程：</p><ol><li><code>django</code> 服务（<code>7000</code> 端口）启动</li><li><code>nginx</code> 会将容器内 <code>django服务</code> 进行反向代理并转发到容器中本地地址 <code>localhost</code> 的 <code>8000</code> 端口</li><li><code>nginx</code> 会监听容器内 <code>localhost</code> 的 <code>8000</code> 端口，反向代理到宿主机的 <code>9000</code> 端口</li><li>通过宿主机的<code>9000</code>端口就可以访问了</li></ol><p>这时候如果你想要通过<code>80</code>端口访问，只需要更改 <code>docker-compose.yml</code> 中 <code>nginx</code> 的宿主机端口</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token punctuation">...</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:8000"</span>  <span class="token punctuation">...</span></code></pre><p>如果你想要配置 <code>https</code> 并配置 <code>SSL</code> 证书，参考 <a href="http://nginx.org/en/docs/http/configuring_https_servers.html" target="_blank" rel="noopener">Configuring HTTPS servers</a></p><p><a name="02319628"></a></p><h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><p>既然准备工作都做完了，那就开始部署吧</p><p>目录结构</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── django│   ├── apps│   ├── __init__.py│   ├── manage.py│   ├── media│   ├── requirements.txt│   ├── static│   ├── templates│   └── website├── docker-compose.yml└── nginx    └── django.conf</code></pre><p><code>media</code> 和 <code>static</code> 文件夹如果没有会自动创建</p><p><a name="b093c1c3"></a></p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><p>好了，在浏览器中访问吧</p><p><strong>！！注意：如果出现容器内数据库连接不上、外网浏览器访问不了，请检查服务器的防火墙或者安全组，需要设置放通内网和出入站规则</strong></p><p>其他命令</p><ul><li>停止容器</li></ul><pre class=" language-bash"><code class="language-bash">docker-compose down</code></pre><ul><li>查看容器</li></ul><pre class=" language-bash"><code class="language-bash">docker-compose <span class="token function">ps</span></code></pre><ul><li>查看容器日志，方便调试</li></ul><pre class=" language-bash"><code class="language-bash">docker-compose logs</code></pre><p>前面在 <code>docker-compose.yml</code> 中 <code>website</code> 服务的 <code>command</code> 中说了要 <strong>尽可能把命令规划好，都写在这里</strong> ，下面告诉你原因</p><p>因为我的 <code>Compose</code> 中 <code>command</code> 基本是已经把 <code>Django</code> 要用的命令都写了，当然是对于我的项目来说</p><p>就只剩一个了，运行后，部署就结束了</p><p><a name="8ad47509"></a></p><h2 id="创建后台管理员账户"><a href="#创建后台管理员账户" class="headerlink" title="创建后台管理员账户"></a>创建后台管理员账户</h2><pre class=" language-bash"><code class="language-bash">docker-compose run website python manage.py createsuperuser</code></pre><p><a name="d962b417"></a></p><h1 id="项目体验"><a href="#项目体验" class="headerlink" title="项目体验"></a>项目体验</h1><p>欢迎 <code>Fork</code> 和 <code>Star</code> 我的 <a href="https://github.com/hongweifuture/Django-Blog" target="_blank" rel="noopener">Django博客项目</a>，如果需要一个练手项目，就去看看吧~~</p><ol><li>第一步：下载源码</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/hongweifuture/Django-Blog</code></pre><ol start="2"><li>第二步：部署</li></ol><ul><li>启动</li></ul><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><ul><li>创建后台管理员账户</li></ul><pre class=" language-bash"><code class="language-bash">docker-compose run website python manage.py createsuperuser</code></pre><hr><p>请看下一篇 <a href="https://www.zhwei.cn/django-docker-backup-restore">基于 Docker 的 Django 容器化部署之三：定时备份，三步实现服务器迁移</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> mysql </tag>
            
            <tag> docker-compose </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Docker 的 Django 容器化部署之一：定制属于自己的 docker 镜像</title>
      <link href="/django-docker-images/"/>
      <url>/django-docker-images/</url>
      
        <content type="html"><![CDATA[<p>本文章为原创内容，只发布于 <a href="https://blog.csdn.net/z_johnny/article/details/104914845" target="_blank" rel="noopener">CSDN 博客</a> 和 <a href="https://www.zhwei.cn/">我的私人博客</a>，转载请注明，谢谢</p><hr><p>基于 Docker 的 Django 容器化部署教程分为三部分，当前所在的是第一部分</p><ul><li><a href="https://www.zhwei.cn/django-docker-images">基于 Docker 的 Django 容器化部署之一：定制属于自己的 docker 镜像</a></li><li><a href="https://www.zhwei.cn/django-docker-compose-deploy">基于 Docker 的 Django 容器化部署之二：docker-compose 部署 Django 项目</a></li><li><a href="https://www.zhwei.cn/django-docker-backup-restore">基于 Docker 的 Django 容器化部署之三：定时备份，两步实现服务器迁移</a></li></ul><blockquote><p>项目部署一直都是很繁琐的事情，由于开发环境和上线服务器的环境不同，所以各种依赖软件包的安装、迭代更新的部署、各种命令的执行都是问题，由此容器化进行项目上线就是一个很好的解决办法。</p></blockquote><p>本次使用的是 <code>Docker</code>，属于 <code>Linux 容器</code> 的一种封装，提供简单易用的容器使用接口。<code>docker</code> 将应用程序与该程序的依赖打包到一个文件里面，运行这个文件，就会生成一个轻量级、可移植的虚拟容器，然后发布到任何流行的 Linux 或 Windows 机器上，程序在这个虚拟容器里面运行就像在真实的物理机上面运行一样。这种容器技术，可以为我们提供一个隔离的运行环境，并且只提供我们所需要的内容。</p><p><a name="b43dd7a0"></a></p><h1 id="了解-docker-及-docker-compose"><a href="#了解-docker-及-docker-compose" class="headerlink" title="了解 docker 及 docker-compose"></a>了解 docker 及 docker-compose</h1><p><a name="Docker"></a></p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><code>Docker</code> 的整个生命周期由三部分组成：<code>镜像（image）</code>+ <code>容器（container）</code>+ <code>仓库（repository）</code>。</p><p><code>Docker</code> 可以生成多个镜像，每个镜像，可以创建多个容器。可以理解成：每一个容器都是一个独立的虚拟操作系统，互不影响，而镜像就是这个操作系统的安装包。想要生成一个容器，就要用安装包（镜像）生成一次，这就是 <code>Docker</code> 的核心概念。发布到仓库（比如 <code>DockerHub</code>）时，是以镜像为单位。</p><ul><li><p><strong>镜像</strong>，是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器。镜像可以包含一个完整的 <code>Linux</code> 操作环境，里面仅安装了 <code>Python</code> 或者其他用户需要的程序。</p></li><li><p><strong>容器</strong>，是由镜像实例化而来，容器是基于镜像创建的，即容器中的进程依赖于镜像中的文件，类似虚拟机，里面可以运行特定的应用，并且容器与容器是相互隔离的。这有点像面向对象的概念：镜像就是类，容器是类实例化之后的对象。</p></li><li><p><strong>仓库</strong>，与 <code>Git</code> 和 <code>Github</code> 类似，<code>Docker</code> 使用的默认仓库是由官方维护的 <code>Docker hub</code> 公共仓库，此仓库是用来包含镜像的位置，同时其还提供了一个注册服务器（register）来保存多个仓库，每个仓库又可以包含多个具备不同 <code>tag</code> 的镜像，而仓库支持的操作如上传、拉取等动作类似于 <code>Git</code>。</p></li></ul><p><a name="docker-compose"></a></p><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p><code>Docker Compose</code> 是 <code>docker</code> 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 compose，我们可以通过 <code>YAML</code> 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。简单来说，就是用来编排多个容器，将启动容器的命令统一写到 <code>docker-compose.yml</code> 文件中，一次启动全部启动。</p><p><a name="f09a14c9"></a></p><h2 id="安装-docker-及-docker-compose"><a href="#安装-docker-及-docker-compose" class="headerlink" title="安装 docker 及 docker-compose"></a>安装 docker 及 docker-compose</h2><ul><li>参考 <a href="https://blog.csdn.net/z_johnny/article/details/103616602" target="_blank" rel="noopener">centos7 安装docker-ce和docker-compose</a></li><li>参考 <a href="https://blog.csdn.net/z_johnny/article/details/104842240" target="_blank" rel="noopener">Debian9 安装docker-ce和docker-compose</a></li><li>参考 <a href="https://www.zhwei.cn/docker-build-image-github-actions/">Github Actions：云打包创建 docker 镜像</a></li></ul><p><a name="3967b04b"></a></p><h1 id="基于-Dockerfile-构建镜像"><a href="#基于-Dockerfile-构建镜像" class="headerlink" title="基于 Dockerfile 构建镜像"></a>基于 Dockerfile 构建镜像</h1><p>打包镜像，就要用到一个文本文件，这个文本默认名称就是 <code>Dockerfile</code>.</p><p>镜像构建的过程中有一个非常重要的概念就是分层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。</p><p>先来看一下我的目录结构，这样子编排是因为后面要使用 <code>docker-compose</code></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── django├── docker-compose.yml└── nginx</code></pre><p>在项目的根目录下新建一个 <code>Dockerfile</code> 文件，无后缀，写入下面内容</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从仓库拉取 python 官方的 image，：3.7就是标签，代表是 3.7 版本的 python 镜像</span>FROM python:3.7<span class="token comment" spellcheck="true"># 作者信息</span>LABEL <span class="token string">"author"</span><span class="token operator">=</span><span class="token string">"HONGWEI"</span>LABEL <span class="token string">"blog"</span><span class="token operator">=</span><span class="token string">"https://www.zhwei.cn/"</span>LABEL <span class="token string">"E-mail"</span><span class="token operator">=</span><span class="token string">"i@zhwei.cn"</span><span class="token comment" spellcheck="true"># 设置 python 环境变量</span>ENV PYTHONUNBUFFERED 1<span class="token comment" spellcheck="true"># 构建参数</span><span class="token comment" spellcheck="true">## 定义存放本机中的 django 项目的目录</span>ARG work_dir<span class="token operator">=</span>/opt/hw-blog<span class="token comment" spellcheck="true"># 在镜像中创建目录并设置项目运行的工作目录</span>RUN <span class="token function">mkdir</span> -p <span class="token variable">${work_dir}</span>WORKDIR <span class="token variable">${work_dir}</span><span class="token comment" spellcheck="true"># 将 django 的源码复制到容器的工作目录，其中requirements.txt在里面</span>ADD ./django <span class="token variable">${work_dir}</span><span class="token comment" spellcheck="true"># 安装依赖包</span>RUN pip <span class="token function">install</span> -r requirements.txt</code></pre><p>构建镜像</p><pre class=" language-bash"><code class="language-bash">docker build -t hw-website <span class="token keyword">.</span></code></pre><p>构建完之后查看一下<code>docker images</code></p><pre class=" language-bash"><code class="language-bash">REPOSITORY                 TAG                 IMAGE ID            CREATED              SIZEhw-website                 latest              4ff*****1cae        About a minute ago   1.06GB</code></pre><p><a name="23164558"></a></p><h1 id="定制属于自己的-docker-镜像"><a href="#定制属于自己的-docker-镜像" class="headerlink" title="定制属于自己的 docker 镜像"></a>定制属于自己的 docker 镜像</h1><p>当你以上面的方式进行打包镜像的时候你会发现镜像的体积很大，并且里面有好多包是我们不需要的</p><ul><li>Centos 的 Python 3.7 的镜像 900M+，包含python2</li><li>Ubuntu 的 Python 3.7 的镜像 800M+，</li><li>Python:3.7-alpine 镜像 90M+，但好多东西没有，需要自己构建</li></ul><p>所以我们就要进行自己定制，里面只有我需要的</p><p>Dockerfile</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 从仓库拉取 带有 python 3.7 的 Alpine Linux 环境</span>FROM python<span class="token punctuation">:</span>3.7<span class="token punctuation">-</span>alpine<span class="token comment" spellcheck="true"># 作者信息</span>LABEL "author"="HONGWEI"LABEL "blog"="https<span class="token punctuation">:</span>//www.zhwei.cn/"LABEL "E<span class="token punctuation">-</span>mail"="i@zhwei.cn"<span class="token comment" spellcheck="true"># 构建参数，工作目录</span>ARG work_dir=/opt/hw<span class="token punctuation">-</span>blogRUN mkdir <span class="token punctuation">-</span>p $<span class="token punctuation">{</span>work_dir<span class="token punctuation">}</span>WORKDIR $<span class="token punctuation">{</span>work_dir<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 将当前目录复制到容器的工作目录</span>ADD ./django $<span class="token punctuation">{</span>work_dir<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 安装alpine依赖， system update\ mysqlclient\ system lib\ Pillow\ bash</span>RUN apk update \    &amp;&amp; apk add <span class="token punctuation">-</span><span class="token punctuation">-</span>virtual mysqlclient<span class="token punctuation">-</span>build gcc python3<span class="token punctuation">-</span>dev musl<span class="token punctuation">-</span>dev \    &amp;&amp; apk add <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache mariadb<span class="token punctuation">-</span>dev \    &amp;&amp; apk add <span class="token punctuation">-</span><span class="token punctuation">-</span>virtual system<span class="token punctuation">-</span>build linux<span class="token punctuation">-</span>headers libffi<span class="token punctuation">-</span>dev \    &amp;&amp; apk add <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache jpeg<span class="token punctuation">-</span>dev zlib<span class="token punctuation">-</span>dev freetype<span class="token punctuation">-</span>dev lcms2<span class="token punctuation">-</span>dev openjpeg<span class="token punctuation">-</span>dev tiff<span class="token punctuation">-</span>dev tk<span class="token punctuation">-</span>dev tcl<span class="token punctuation">-</span>dev \    &amp;&amp; apk add <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache bash bash<span class="token punctuation">-</span>doc bash<span class="token punctuation">-</span>completion \    &amp;&amp; pip install pip <span class="token punctuation">-</span>U \    &amp;&amp; pip install <span class="token punctuation">-</span>r $<span class="token punctuation">{</span>work_dir<span class="token punctuation">}</span>/requirements.txt <span class="token comment" spellcheck="true"># 在Alpine上，pip将从源代码构建需要依赖包来install，如mysqlclient需要gcc和musl-dev，因此需要将apk del *-build推迟到安装Python模块之后</span>RUN apk del mysqlclient<span class="token punctuation">-</span>build \    &amp;&amp; apk del system<span class="token punctuation">-</span>build</code></pre><p>构建镜像</p><pre class=" language-bash"><code class="language-bash">docker build -t hw-website <span class="token keyword">.</span></code></pre><p>构建完之后查看一下<code>docker images</code>，效果立杆见影</p><pre class=" language-bash"><code class="language-bash">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZEhw-website                 latest              14a*****6c5a        12 minutes ago      549MB</code></pre><p>依赖包说明：</p><ul><li><code>python:3.7-alpine</code>：<code>alpine</code> 是一个 <code>Linux</code> 系统发行版，主打小巧、轻量、安全。我们程序运行需要 <code>Python</code> 环境，因此使用这个小巧但包含完整 Python 环境的基础镜像来构建我们的应用镜像。</li><li><code>mysqlclient</code>：我使用的是<code>mysql</code>数据库。编译所需的库文件在<code>pypi</code>上可以查到 <a href="https://pypi.org/project/mysqlclient/" target="_blank" rel="noopener">mysqlclient依赖库</a></li><li><code>Pillow</code>：使用 <code>django</code> 处理图片时，会使用到 <code>Pillow</code> 这个 <code>Python</code> 库。<a href="https://github.com/python-pillow/docker-images/blob/master/alpine/Dockerfile" target="_blank" rel="noopener">Pillow依赖库</a></li></ul><p>所以至于你需要的其他库的依赖，需要去搜索一下</p><ul><li>参考 <a href="https://cloud.tencent.com/developer/article/1046959" target="_blank" rel="noopener">Alpine Linux 包管理工具 apk 简介</a></li><li>参考 <a href="https://yeasy.gitbooks.io/docker_practice/image/build.html" target="_blank" rel="noopener">使用 Dockerfile 定制镜像</a></li><li>参考 <a href="https://itbilu.com/linux/docker/VyhM5wPuz.html" target="_blank" rel="noopener">Docker镜像构建文件Dockerfile及相关命令介绍</a></li><li>参考 <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy" target="_blank" rel="noopener">ADD or COPY</a></li></ul><p><a name="97944c42"></a></p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ul><li>添加alpine apk源</li></ul><p>参考 <a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management#Packages_and_Repositories" target="_blank" rel="noopener">Alpine Linux package management</a> 和 <a href="https://git.alpinelinux.org/aports/tree/main/alpine-mirrors/mirrors.yaml" target="_blank" rel="noopener">alpine-mirrors/mirrors.yaml</a></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 添加alpine apk源</span>RUN echo "http<span class="token punctuation">:</span>//mirrors.aliyun.com/alpine/latest<span class="token punctuation">-</span>stable/main/" <span class="token punctuation">></span> /etc/apk/repositories;RUN echo "http<span class="token punctuation">:</span>//mirrors.aliyun.com/alpine/latest<span class="token punctuation">-</span>stable/community/" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories;RUN echo "https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/alpine/latest<span class="token punctuation">-</span>stable/main/" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories;RUN echo "https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/alpine/latest<span class="token punctuation">-</span>stable/community/" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories;RUN echo "http<span class="token punctuation">:</span>//dl<span class="token punctuation">-</span>cdn.alpinelinux.org/alpine/latest<span class="token punctuation">-</span>stable/community/" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories;RUN echo "http<span class="token punctuation">:</span>//dl<span class="token punctuation">-</span>2.alpinelinux.org/alpine/edge/community" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories;RUN echo "http<span class="token punctuation">:</span>//dl<span class="token punctuation">-</span>3.alpinelinux.org/alpine/edge/community" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories;RUN echo "http<span class="token punctuation">:</span>//dl<span class="token punctuation">-</span>4.alpinelinux.org/alpine/edge/community" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories;RUN echo "http<span class="token punctuation">:</span>//dl<span class="token punctuation">-</span>5.alpinelinux.org/alpine/edge/community" <span class="token punctuation">></span><span class="token punctuation">></span> /etc/apk/repositories</code></pre><ul><li>添加豆瓣<code>pip</code>源</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 构建参数，pip源</span>ARG pip_url=https<span class="token punctuation">:</span>//pypi.douban.com/simpleARG pip_host=pypi.douban.com<span class="token comment" spellcheck="true"># 更新 pip 到最新</span>RUN pip install pip <span class="token punctuation">-</span>U <span class="token punctuation">-</span>i $<span class="token punctuation">{</span>pip_url<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 将本地的文件拷贝到容器镜像</span>COPY requirements.txt /requirements.txt<span class="token comment" spellcheck="true"># pip 安装依赖文件</span>RUN pip install <span class="token punctuation">-</span>r requirements.txt <span class="token punctuation">-</span>i $<span class="token punctuation">{</span>pip_url<span class="token punctuation">}</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>trusted<span class="token punctuation">-</span>host $<span class="token punctuation">{</span>pip_host<span class="token punctuation">}</span></code></pre><p><a name="a3519b2b"></a></p><h1 id="好了，问题来了"><a href="#好了，问题来了" class="headerlink" title="好了，问题来了"></a>好了，问题来了</h1><hr><p>镜像我都构建完了，怎么用呢?</p><p>请看下一篇 <a href="https://www.zhwei.cn/django-docker-compose-deploy">基于 Docker 的 Django 容器化部署之二：docker-compose 部署 Django 项目</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> mysql </tag>
            
            <tag> docker-compose </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配合 Valine 评论系统使用的 Valine-Admin 及显示个性头像</title>
      <link href="/Valine-Admin-Gravatar/"/>
      <url>/Valine-Admin-Gravatar/</url>
      
        <content type="html"><![CDATA[<p><a name="Valine"></a></p><h1 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h1><p>一款快速、简洁且高效的无后端评论系统。</p><p>Valine 诞生于2017年8月7日，是一款基于<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用 <a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>。</p><p><a name="c666ad11"></a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>快速</li><li>安全</li><li>Emoji 😉</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用(~15kb gzipped)</li><li>文章阅读量统计   v1.2.0+</li></ul><p><a name="c9c2e389"></a></p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><ol><li>注册<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></li><li>创建<code>Valine</code>应用，名称任意，例如<code>Valine</code></li><li>进入对应的应用，点击<code>设置 -&gt; 应用 Keys</code>，获取<code>AppID</code>和<code>AppKey</code></li><li>以<code>Hexo</code>主题配置文件为例，填入对应的地方，后面考虑加入到<code>Django</code></li></ol><pre><code>valine:  enable: true  appId: AppID  appKey: AppKey  notify: false  verify: false  visitor: true  avatar: &#39;mp&#39; # Gravatar style : mp/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: &#39;just go go&#39; # Comment Box placeholder</code></pre><p><a name="c8aa3ee9"></a></p><h2 id="Valine-配置"><a href="#Valine-配置" class="headerlink" title="Valine 配置"></a>Valine 配置</h2><ol><li>查看评论<br /><br>点击 <code>存储 -&gt; 结构化数据</code>，选择<code>创建Class</code>，名称<code>Comment</code>，其他保持默认，以后就可在此Class内查看</li><li>文章阅读量统计<br /><br>点击 <code>存储 -&gt; 结构化数据</code>，选择<code>创建Class</code>，名称<code>Counter</code>，其他保持默认，以后就可在此Class内查看</li></ol><blockquote><p>注：文章阅读量统计有时会和博客内的统计软件不兼容</p></blockquote><p><a name="Valine-Admin"></a></p><h1 id="Valine-Admin"><a href="#Valine-Admin" class="headerlink" title="Valine-Admin"></a>Valine-Admin</h1><p><a href="https://github.com/hongweifuture/Valine-Admin" target="_blank" rel="noopener">Github 项目地址，具体教程以 最新版 为准</a></p><p><a name="e05dce83"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Valine Admin 项目是一个对 <a href="https://valine.js.org" target="_blank" rel="noopener">Valine</a> 评论系统的拓展应用，可增强 Valine 的邮件通知功能。基于 Leancloud 的云引擎与云函数，主要实现评论邮件通知、评论管理、自定义邮件通知模板等功能，而且还可以提供邮件 <code>通知站长</code> 和 <code>@ 通知</code> 的功能。</p><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/高级配置.md#邮件通知展示" target="_blank" rel="noopener">点击查看演示</a></p><p><a name="a9f94dcd"></a></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li>需要确保 Valine 的基础功能是正常的，参考 <a href="https://valine.js.org" target="_blank" rel="noopener">Valine Docs</a>。</li><li>进入 <a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">Leancloud</a> 对应的 Valine 应用中。</li><li>点击 <code>云引擎 -&gt; 设置</code> 填写代码库：<code>https://github.com/hongweifuture/Valine-Admin</code>，保存</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/20200207142608.png" alt=""></p><ol start="4"><li>设置<code>自定义环境变量</code>，需要设置云引擎的环境变量以提供必要的信息，变量参数参考下面的<code>配置项</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/20200207155409.png" alt=""><br /><br><br /><br><strong>配置项</strong></p><table><thead><tr><th align="center">变量</th><th align="center">示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">SITE_NAME</td><td align="center">HONGWEI’S Blog</td><td>[必填] 网站名称</td></tr><tr><td align="center">SITE_URL</td><td align="center"><a href="https://www.zhwei.cn">https://www.zhwei.cn</a></td><td>[必填] 网站地址，<strong>最后不要加 <code>/</code></strong></td></tr><tr><td align="center">SMTP_SERVICE</td><td align="center">QQ</td><td>[必填] 邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services" target="_blank" rel="noopener">更多</a>。 — <em>如这里没有你使用的邮件提供商，请查看<a href="/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8">自定义邮件服务器</a></em></td></tr><tr><td align="center">SMTP_USER</td><td align="center"><a href="mailto:xxxx@qq.com">xxxx@qq.com</a></td><td>[必填] SMTP登录用户，一般为邮箱地址</td></tr><tr><td align="center">SMTP_PASS</td><td align="center">xxxx</td><td>[必填] SMTP登录密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</td></tr><tr><td align="center">SENDER_NAME</td><td align="center">HONGWEI’S Blog Valine 评论提醒</td><td>[可选] 发件人</td></tr><tr><td align="center">ADMIN_URL</td><td align="center"><a href="https://xxx.leanapp.cn/" target="_blank" rel="noopener">https://xxx.leanapp.cn/</a></td><td>[建议] Web主机二级域名，用于自动唤醒</td></tr><tr><td align="center">TO_EMAIL</td><td align="center"><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td>[可选] 指定站长收信邮箱，默认值为<code>SITE_USER</code>。用于 SMTP 发件人与站长收件人不一致的情况下使用。</td></tr><tr><td align="center">TEMPLATE_NAME</td><td align="center">rainbow</td><td>[可选] 通知邮件的模板（default和rainbow），参考高级功能</td></tr></tbody></table><ol start="5"><li>点击 <code>云引擎 -&gt; 部署</code>，选择<code>Git源码部署</code>，分支或版本号输入<code>master</code>，下载最新依赖（可选），部署</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/20200207143035.png" alt=""><br /><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/20200207143205.png" alt=""><br /><br><a name="877a58ea"></a></p><h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><ol><li>点击 <code>云引擎 -&gt; 设置</code>，在<code>Web主机域名</code>位置点击<code>申请</code>，获取二级域名，现在的二级域名不支持自定义，如果想好记请参考高级功能</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/20200207143315.png" alt=""><br /></p><ol start="2"><li>设置后台管理登录信息，点击 <code>存储 -&gt; 结构化数据</code>，选择<code>_User -&gt; 添加行</code>，只需要填写<code>password</code>、<code>username</code>、<code>email</code>这三个字段即可, 使用 email 作为账号登陆、password 作为账号密码、username 任意即可。（为了安全考虑，此 email 必须为配置中的 SMTP_USER 或 TO_EMAIL， 否则不允许登录）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/20200207151339.png" alt=""><br /></p><ol start="3"><li>此后，可以通过<code>https://二级域名.leanapp.cn/</code>管理评论</li></ol><p><a name="a1bd9760"></a></p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>免费版的 LeanCloud 容器，是有强制性休眠策略的，不能 24 小时运行：</p><ul><li>每天必须休眠 6 个小时</li><li>30 分钟内没有外部请求，则休眠</li><li>休眠后如果有新的外部请求实例则马上启动（但激活时此次发送邮件会失败）。</li></ul><p>分析了一下上方的策略，如果不想付费的话，最佳使用方案就设置定时器，目前基于 LeanCloud 自带定时器实现了两种云函数定时任务：</p><ul><li>自动唤醒，定时访问Web APP二级域名防止云引擎休眠（推荐）</li><li>定时检查，每天定时检查24小时内漏发的邮件通知</li></ul><p><strong>配置</strong></p><ol><li>首先需要添加环境变量，点击 <code>云引擎 -&gt; 设置</code>，配置<code>自定义环境变量</code>，变量名<code>ADMIN_URL</code>，变量值<code>Web 主机域名，即二级域名地址</code>，添加后重启容器环境变量才会生效</li><li>配置定时任务，击 <code>云引擎 -&gt; 定时任务</code></li></ol><ul><li>配置自动唤醒（推荐），创建定时任务，名称任意，生产环境选择<code>self-wake</code>云函数，Cron表达式填入<code>0 */20 7-23 * * ?</code>，表示每天 7 - 23 点每 20 分钟访问一次，这样可以保持每天的绝大多数时间邮件服务是正常的。</li><li>配置定时检查，创建定时任务，名称任意，生产环境选择<code>resend-mails</code>云函数，Cron表达式填入<code>0 0 8 * * ?</code>，表示每天早8点检查过去24小时内漏发的通知邮件并补发</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/20200207153831.png" alt=""><br /></p><p><a name="1f318234"></a></p><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener">自定义邮件模板</a></p><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%94%B6%E4%BB%B6%E9%82%AE%E7%AE%B1" target="_blank" rel="noopener">自定义收件邮箱</a></p><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">自定义邮件服务器</a></p><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#web-%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">Web 评论管理</a></p><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E5%A5%BD%E8%AE%B0%E7%9A%84%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">好记的二级域名</a></p><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#leancloud-%E4%BC%91%E7%9C%A0%E7%AD%96%E7%95%A5" target="_blank" rel="noopener">Leancloud 休眠策略(必看)</a></p><p><a href="https://github.com/hongweifuture/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E5%BC%80%E5%8F%91" target="_blank" rel="noopener">开发指南</a></p><p><a name="e9510be1"></a></p><h2 id="显示个性头像"><a href="#显示个性头像" class="headerlink" title="显示个性头像"></a>显示个性头像</h2><p>Valine 目前使用的是<a href="http://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 作为评论列表头像。</p><p>请自行登录或注册<a href="http://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a>，然后修改自己的头像。</p><p>评论的时候，留下在<a href="http://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a>注册时所使用的邮箱即可。</p><p>感谢<code>gravatar.cat.net</code>提供的镜像服务。</p><blockquote><p>如果你修改了头像后发现没有更新，请不要慌张，因为<code>gravatar.cat.net</code> 有七天的缓存期，安静的等待吧~</p></blockquote><p>目前<code>非自定义头像</code>有以下7种<code>默认值</code>可选:</p><table><thead><tr><th align="center">参数值</th><th align="center">表现形式</th><th>备注</th></tr></thead><tbody><tr><td align="center">空字符串<code>&#39;&#39;</code></td><td align="center"><img src="https://img-blog.csdnimg.cn/20200207232029388.jpg#alt=Gravatar%E5%AE%98%E6%96%B9%E5%9B%BE%E5%BD%A2" alt=""></td><td>Gravatar官方图形</td></tr><tr><td align="center"><code>mp</code></td><td align="center"><img src="https://img-blog.csdnimg.cn/20200207231815493.png#alt=%E7%A5%9E%E7%A7%98%E4%BA%BA%28%E4%B8%80%E4%B8%AA%E7%81%B0%E7%99%BD%E5%A4%B4%E5%83%8F%29" alt=""></td><td>神秘人(一个灰白头像)</td></tr><tr><td align="center"><code>identicon</code></td><td align="center"><img src="https://img-blog.csdnimg.cn/20200207231835995.png#alt=%E6%8A%BD%E8%B1%A1%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2" alt=""></td><td>抽象几何图形</td></tr><tr><td align="center"><code>monsterid</code></td><td align="center"><img src="https://img-blog.csdnimg.cn/20200207231850268.png#alt=%E5%B0%8F%E6%80%AA%E7%89%A9" alt=""></td><td>小怪物</td></tr><tr><td align="center"><code>wavatar</code></td><td align="center"><img src="https://img-blog.csdnimg.cn/20200207231902977.png#alt=%E7%94%A8%E4%B8%8D%E5%90%8C%E9%9D%A2%E5%AD%94%E5%92%8C%E8%83%8C%E6%99%AF%E7%BB%84%E5%90%88%E7%94%9F%E6%88%90%E7%9A%84%E5%A4%B4%E5%83%8F" alt=""></td><td>用不同面孔和背景组合生成的头像</td></tr><tr><td align="center"><code>retro</code></td><td align="center"><img src="https://img-blog.csdnimg.cn/20200207231915298.png#alt=%E5%85%AB%E4%BD%8D%E5%83%8F%E7%B4%A0%E5%A4%8D%E5%8F%A4%E5%A4%B4%E5%83%8F" alt=""></td><td>八位像素复古头像</td></tr><tr><td align="center"><code>robohash</code></td><td align="center"><img src="https://img-blog.csdnimg.cn/20200207231932699.png#alt=%E4%B8%80%E7%A7%8D%E5%85%B7%E6%9C%89%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2%E3%80%81%E9%9D%A2%E9%83%A8%E7%AD%89%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA" alt=""></td><td>一种具有不同颜色、面部等的机器人</td></tr><tr><td align="center"><code>hide</code></td><td align="center"></td><td>不显示头像</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    avatar<span class="token punctuation">:</span><span class="token string">''</span> <span class="token comment" spellcheck="true">// (''/mp/identicon/monsterid/wavatar/robohash/retro/hide)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><strong>Gravatar是什么？</strong>           ——下面内容摘抄自<a href="https://www.iplaysoft.com/gravatar.html" target="_blank" rel="noopener">异次元软件世界</a></p><p><code>Gravatar</code>，它的全称叫做“Globally Recognized Avatar”，翻译过来叫做全球通用头像。</p><p>Gravatar 的概念首先是在国外的独立 <a href="https://wordpress.com/" target="_blank" rel="noopener">WordPress</a> 博客中兴起的，当你到任何一个支持Gravatar的网站留言时，这个网站都就会根据你所提供的 Email 地址为你显示出匹配的头像。当然，这个头像，是需要你事先到 Gravatar 的网站注册并上传的，否则，在这个网站上，就只会显示成一个默认的头像。</p><p>这个Web2.0时代的产物，当时好多网站均已支持Gravatar服务了，你可以通过你的个性头像打造起你的个人品牌了！并且这个 Gravatar 没有什么约束，想换头像换马甲？很简单，改改留言的名字和email地址就可以了。另外注册与使用 Gravatar 均是完全免费的，唯一的门槛是，国内可能无法正常访问。</p><hr><p>大致使用流程：</p><ol><li>注册：进入<a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar网站</a>，点击页面的Sign Up进行注册。</li><li>验证：进入你的邮箱，从<code>Gravatar</code>发出的信件中拷贝那段链接地址，在浏览器输入。</li><li>设置昵称、密码。</li><li>选择上传图片：一般都是从电脑中上传（My computer’s hard drive）。</li><li>剪裁大小</li><li>评级：你的头像要被分级的，因为可能会有朋友喜欢用比较曝露的头像，会影响小朋友身心健康的说。如果你的图片不是特别那个的话，一般不用选择Sex或暴力之类的，直接选择G（通用型），这样基本任何网站都能显示这个等级的图片。异次元比较邪恶，暂时允许显示R级以下的头像…</li><li>等待审核：可能需要站方短暂审核一下，一般选择了G，而你的图片没什么特别的，很快就通过。一般遇上慢的情况也就10分钟左右。</li></ol><p>完成了以上步骤，今后在支持<code>Gravatar</code>的网站留言都会显示你帅帅的头像了。暂时来说，大部分支持Gravatar的网站均是使用 WordPress 程序的博客，但其实任何其他网站程序，如果加入了Gravatar的代码，也是可以支持Gravatar的。估计这个应用在日后会渐渐普及起来吧，起码用户不需要每到一个网站去就搞一下头像……</p><p><strong>Valine的个性头像就是来自<a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar网站</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
            <tag> Valine-Admin </tag>
            
            <tag> Leancloud </tag>
            
            <tag> 评论系统 </tag>
            
            <tag> Gravatar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo：语雀云端写作 Github Actions 持续集成</title>
      <link href="/hexo-github-actions-yuque/"/>
      <url>/hexo-github-actions-yuque/</url>
      
        <content type="html"><![CDATA[<p>本文章为原创内容，只发布于本博客和<a href="https://blog.csdn.net/z_johnny" target="_blank" rel="noopener">我的CSDN博客</a>，转载请注明，谢谢</p><p>使用 Hexo 静态博客网站发表文章，需要</p><ol><li>本地以Markdown的形式写好文章</li><li>借助 Hexo 生成静态页面</li><li>部署到云主机或者通过 git 到托管平台</li></ol><p>既然要本地借助 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 生成静态页面，那就需要设置 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 环境和博客源码，虽然环境设置简单，源码从Github、coding、gitee、gitlab等地方下载方便，但是在换电脑之后，又要重复相同的事情，还是比较麻烦，前一阵我用 <a href="https://www.docker.com/" target="_blank" rel="noopener">docker</a>   将我的博客源码打包成镜像留存下来，也是面临同样的问题，就是换电脑后还要安装 <code>docker</code> 和 <code>docker-compose</code>，也是麻烦。<br /><hr><br />当我遇见了 <a href="https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions" target="_blank" rel="noopener">Github Actions</a> 和 <a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a> 后，一切都发生了变化<br /><hr><br />简单来说就是</p><blockquote><p>由 Hexo + 语雀 + yuque-hexo + Github Actions + web hook + severless 打造的持续集成个人博客</p></blockquote><blockquote><p>至于托管平台，Github Pages or Coding Pages or VPS or Other，自行选择。</p></blockquote><ul><li>Github 保存博客源码，私有库已经免费，还在用<code>Travis CI</code>？非开源的私有项目想在 <code>Travis CI</code> 上构建价格还是非常感人的!</li><li><a href="https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions" target="_blank" rel="noopener">Github Actions</a> 是 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 推出的一款持续集成工具，<strong>完全免费</strong></li><li><a href="https://www.yuque.com/" target="_blank" rel="noopener">语雀</a> 是阿里人都在用的笔记与文档知识库，专业的云端知识库，支持<code>web hook</code></li><li><a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a> 是 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 上开源的一款语雀知识库同步工具</li><li><code>severless</code> 是云函数，当前 <a href="https://cloud.tencent.com/product/scf/" target="_blank" rel="noopener">腾讯云函数</a> 和 <a href="https://help.aliyun.com/document_detail/139203.html?spm=a2c4g.11186623.6.554.7fd95582eHBmAz" target="_blank" rel="noopener">阿里云函数</a>都可以免费提供，对于博客，免费额度足够了，可以对比一下费用自行选择</li></ul><p><a name="026e76ab"></a></p><h1 id="关于-Hexo"><a href="#关于-Hexo" class="headerlink" title="关于 Hexo"></a>关于 Hexo</h1><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一款基于 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 的静态博客框架，其快速、简洁且高效。没有数据库和后台的概念。</p><ul><li>超快速度，<code>Node.js</code> 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li><li><code>Hexo</code> 支持 <code>GitHub</code> <code>Flavored</code> <code>Markdown</code> 的所有功能，甚至可以整合 <code>Octopress</code> 的大多数插件。</li><li>一键部署，只需一条指令即可部署到 <code>GitHub Pages, Heroku</code> 或其他平台。</li><li>插件和可扩展性，强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成</li></ul><p><a name="74775b29"></a></p><h1 id="关于-Github-Actions"><a href="#关于-Github-Actions" class="headerlink" title="关于 Github Actions"></a>关于 Github Actions</h1><p>不妨先去了解一下</p><p><a href="https://help.github.com/cn/actions/getting-started-with-github-actions/about-github-actions" target="_blank" rel="noopener">About GitHub Actions</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程</a></p><p><a href="https://juejin.im/post/5be191736fb9a049de6cd463" target="_blank" rel="noopener">[译] GitHub Actions 介绍，了解一下？</a></p><p>我的<a href="https://www.zhwei.cn/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E4%BA%A4%E4%BB%98">博客 持续集成和交付 专栏</a> 有实例可以去参考一下，后续还会继续更新。</p><p>或者 <a href="https://blog.csdn.net/z_johnny/category_6218500.html" target="_blank" rel="noopener">我的 CSDN 博客</a></p><p><a name="repository_dispatch"></a></p><h2 id="repository-dispatch"><a href="#repository-dispatch" class="headerlink" title="repository_dispatch"></a>repository_dispatch</h2><p><strong>之所以有了这篇文章是因为我看到了<code>Github Actions</code>中的外部事件<code>repository_dispatch</code></strong></p><ul><li><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener">Github Help 关于 repository_dispatch</a></li><li><a href="https://developer.github.com/v3/activity/events/types/#repositorydispatchevent" target="_blank" rel="noopener">RepositoryDispatchEvent</a></li><li><a href="https://developer.github.com/v3/repos/#create-a-repository-dispatch-event" target="_blank" rel="noopener">Create a repository dispatch event</a></li><li><a href="https://blog.marcnuri.com/triggering-github-actions-across-different-repositories/" target="_blank" rel="noopener">Triggering GitHub Actions across different repositories</a></li><li><a href="https://medium.com/@christinavhastenrath/how-to-run-github-actions-manually-afebbe77d325" target="_blank" rel="noopener">How to run GitHub Actions manually</a></li><li><a href="http://www.btellez.com/posts/triggering-github-actions-with-webhooks.html" target="_blank" rel="noopener">Setting up Webhooks for Github Actions</a></li></ul><p>GitHub Actions支持的外部事件<code>repository_dispatch</code> 必须具有以下请求头：</p><pre class=" language-bash"><code class="language-bash">curl -X POST https://api.github.com/repos/:owner/:repo/dispatches \    -H <span class="token string">'Accept: application/vnd.github.everest-preview+json'</span> \    -H <span class="token string">"Authorization: token GITHUB_PERSONAL_ACCESS_TOKEN"</span> \    -d <span class="token string">'{"event_type":"start"}'</span></code></pre><p>如果返回的 Response 是 <code>Status: 204 No Content</code>，那就是成功了，去 Github 中看一看，事件已经被触发，这个可以使用 postman 测试一下<br /><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/postman.png" alt=""></p><p>注意，Accept 具有<code>application/vnd.github.everest-preview+json</code>自定义媒体类型值。<br />语雀中的<code>Web Hook</code>是不能添加请求头的，所有我们就需要一个中间件把他们连接起来，这个就是<code>serverless云函数</code></p><p><a name="af51c8c2"></a></p><h1 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h1><ol><li>Hexo 博客搭建好，将源码上传到 Github，私有还是公有库都可以</li><li>在 Github 中开启 Github Actions 服务，配置 yaml 格式的 deploy 脚本</li><li>注册语雀，创建知识库并发布一篇文章，必须发布过文章，因为 yuque-hexo 会删除 _posts 文件夹</li><li>编写 serverless 函数，测试可以触发 Github Actions，获取触发地址</li><li>配置语雀的 webhook，使其可调用 serverless 函数</li><li>语雀编写文章后触发 Github Actions 实现 Hexo 的自动部署，生成静态文件并发布<br /></li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G4.png" alt=""></p><p><strong>下面以Github Actions将Hexo生成的静态页面推送到Github Pages举例</strong><br><a name="d47f981f"></a></p><h2 id="创建-Github-Pages"><a href="#创建-Github-Pages" class="headerlink" title="创建 Github Pages"></a>创建 Github Pages</h2><ol><li>登录github</li><li>创建项目，项目名字<code>username.github.io</code>，必须为公开库</li></ol><p><a name="700947b4"></a></p><h2 id="创建-Hexo-博客并配置"><a href="#创建-Hexo-博客并配置" class="headerlink" title="创建 Hexo 博客并配置"></a>创建 Hexo 博客并配置</h2><p>可参考：</p><ul><li><a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="noopener">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a></li><li><a href="https://www.jianshu.com/p/23e9e27eb437" target="_blank" rel="noopener">Hexo + GitHub 搭建个人博客</a></li><li>教程非常多，善用搜索</li></ul><p>配置完成，本地预览达到自己满意，编写文章发布一切搞定后就能继续了。</p><p><a name="b7701ede"></a></p><h2 id="创建-Github-源码仓库"><a href="#创建-Github-源码仓库" class="headerlink" title="创建 Github 源码仓库"></a>创建 Github 源码仓库</h2><p>在 github 上创建存放 Hexo 源码的仓库，此仓库和 Pages 不是一个仓库，并将源码 push 到此仓库</p><blockquote><p>私有库和公开库都可以，放在 Pages 仓库其他分支也行，本教程是基于单独的 Hexo 源码仓库</p></blockquote><p><a name="9e5c7d9b"></a></p><h2 id="配置-Github-Actions-脚本"><a href="#配置-Github-Actions-脚本" class="headerlink" title="配置 Github Actions 脚本"></a>配置 Github Actions 脚本</h2><p>两种方法配置，内容一样</p><ol><li>在Hexo源码仓库的页面选择<code>Actions--&gt;Set up a workflow yourself</code>，进行网页编写</li><li>在本地环境根目录创建<code>.github/workflows</code>文件夹，里面放写好的yaml脚本</li></ol><p>脚本我以一种举例，其他方法同样可以实现，请查看<a href="https://www.zhwei.cn/">我的博客</a></p><p>如</p><ul><li><a href="https://www.zhwei.cn/github-actions-deploy-hexo-ssh/">Github Actions：通过 SSH 自动部署 Hexo</a></li><li><a href="https://www.zhwei.cn/github-actions-deploy-hexo-api/">Github Actions：通过 API 自动部署 Hexo</a></li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># workflow name</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy To Github Pages<span class="token comment" spellcheck="true"># 当有 push 到仓库和外部触发的时候就运行</span><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> repository_dispatch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># YUQUE_TOKEN</span><span class="token comment" spellcheck="true"># Github_SSH_PRIVATE_KEY</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Hexo Public To Pages    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest     <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>    <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master     <span class="token comment" spellcheck="true"># from: https://github.com/actions/setup-node  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js 10.x       <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"10.x"</span>    <span class="token comment" spellcheck="true"># from https://github.com/x-cold/yuque-hexo</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Hexo Dependencies and Generate Public Files      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">YUQUE_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.YUQUE_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        npm install hexo-cli -g        npm install yuque-hexo -g        npm install        npm run start</span>    <span class="token comment" spellcheck="true"># from https://github.com/peaceiris/actions-gh-pages    </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy      <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">deploy_key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.Github_SSH_PRIVATE_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">external_repository</span><span class="token punctuation">:</span> 用户名/仓库          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> master          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public          <span class="token key atrule">commit_message</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.event.head_commit.message <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个脚本实现了发布 Hexo 的 Public 到 Pages，这只是一种方法，你也可以使用 <a href="https://www.zhwei.cn/github-actions-deploy-hexo-ssh/">hexo d</a> 、<a href="https://www.zhwei.cn/github-actions-deploy-hexo-api/">API</a>、<a href="https://github.com/JamesIves/github-pages-deploy-action" target="_blank" rel="noopener">github-pages-deploy-action</a>等形式进行发布。</p><p>但是现在你还不能运行，因为里面的隐藏参数还没有设置<br /><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G7.png" alt=""></p><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">YUQUE_TOKEN</td><td align="left">从语雀获取的TOKEN，语雀上点击个人头像 –&gt; 设置 –&gt; Token 即可获取，要在Hexo源仓库的Settings–&gt;Secrets中进行添加，对重要信息进行保密</td></tr><tr><td align="center">Github_SSH_PRIVATE_KEY</td><td align="left">是<code>SSH-Key</code>密钥中的私钥，需要在<code>Secrets</code>中进行添加，公钥（.pub）已经存储在 Github 中</td></tr></tbody></table><br /><p><a name="EAQEE"></a></p><h2 id="配置腾讯serverless云函数"><a href="#配置腾讯serverless云函数" class="headerlink" title="配置腾讯serverless云函数"></a>配置腾讯serverless云函数</h2><ol><li>登录腾讯云，搜索云函数，创建</li><li>选择 <code>python</code>，2.7 和 3.6 都行，空白函数</li><li>运行角色，<code>SCF_QcsRole</code>即可</li><li>注意执行方法，有强制要求</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G1.png" alt=""><br /><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G2.png" alt=""></p><p>这里我使用的是python 2.7</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">main_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/用户名/仓库名/dispatches"</span><span class="token punctuation">,</span>    json <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"event_type"</span><span class="token punctuation">:</span> <span class="token string">"start"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">'curl/7.52.1'</span><span class="token punctuation">,</span>              <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>              <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/vnd.github.everest-preview+json'</span><span class="token punctuation">,</span>              <span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string">'token Github访问Token'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"This's OK!"</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>status_code</code></pre><p>在函数代码中测试一下，如果Actions正常触发，大功告成<br />5. 配置触发方式，保存，获取到 <strong>访问路径</strong>，后面要用到</p><ul><li>触发方式：API网关触发器</li><li>API服务类型：新建API服务</li><li>API服务：SCF_API_SERVICE</li><li>请求方法：ANY</li><li>发布环境：发布</li><li>鉴权方法：免鉴权</li><li>启动集成响应：未启用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G3.png" alt=""><br /><br><a name="30dee548"></a></p><h2 id="配置语雀"><a href="#配置语雀" class="headerlink" title="配置语雀"></a>配置语雀</h2><p><a name="715403f7"></a></p><h3 id="语雀上"><a href="#语雀上" class="headerlink" title="语雀上"></a>语雀上</h3><ol><li>注册，登录</li><li>创建知识库–&gt;文档知识库–&gt;可见范围为互联网可见</li><li>工作台–&gt;知识库–&gt;找到新创建的知识库，管理–&gt;设置–&gt;路径进行自定义，后面有用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G5.png" alt=""><br /></p><ol start="4"><li>工作台–&gt;知识库–&gt;找到新创建的知识库，管理–&gt;设置–&gt;开发者–&gt;名称任意。URL为云函数的地址，即上面获取到的 <strong>访问路径</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G6.png" alt=""><br /></p><p>权限建议选择</p><ul><li>仅主动推送更新触发（强烈建议）</li><li>发布文档</li><li>更新文档</li><li>删除文档</li></ul><p><a name="03fb728b"></a></p><h3 id="hexo源码上"><a href="#hexo源码上" class="headerlink" title="hexo源码上"></a>hexo源码上</h3><p>可本地更新后 push 或者直接在 github 网页修改</p><p>先安装 <a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> yuque-hexo --save</code></pre><p>编辑<code>package.json</code>文件，添加以下内容</p><p>Npm 脚本 “start” 和 “yuqueConfig”，将操作命令合并为一个脚本，只需要执行 <code>npm run start</code>即可完成语雀的同步和 Hexo 的清理和静态文件生成</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> ...  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo clean &amp;&amp; yuque-hexo sync &amp;&amp; hexo clean &amp;&amp; hexo generate"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> ...  <span class="token property">"yuqueConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>    <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"语雀个人路径"</span><span class="token punctuation">,</span>    <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"知识库名称"</span><span class="token punctuation">,</span>    <span class="token property">"mdNameFormat"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>    <span class="token property">"postPath"</span><span class="token operator">:</span> <span class="token string">"source/_posts"</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublished"</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="de9ad141"></a></p><h1 id="Come-on-发布文章"><a href="#Come-on-发布文章" class="headerlink" title="Come on 发布文章"></a>Come on 发布文章</h1><p>无论是发布新文章还是更新删除等等操作，只要选择<code>“文档有较大更新，推送给关注知识库的人”</code>即可自动触发<br /><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G8.png" alt=""></p><hr><p><strong>下面推荐了一下我的博客主题，算是广告吧~！！</strong></p><p><a name="0bff20e1"></a></p><h1 id="关于-halo"><a href="#关于-halo" class="headerlink" title="关于 halo"></a>关于 halo</h1><p>本人目前使用的主题是 <a href="https://github.com/hongweifuture/hexo-theme-halo" target="_blank" rel="noopener">hexo-theme-halo</a> ，这是一个采用 <a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 和响应式设计的 Hexo 博客主题。 是博主基于 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a> 主题修改而来。</p><p><a href="https://www.zhwei.cn/">主题演示</a></p><p><a name="c666ad11"></a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>博客名字动态显示，文章信息统计统页面展示</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片，首页轮播图设置为70%页面高度</li><li>首页<code>subtitle</code>替换打字效果，添加动态诗词自动切换，</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页，<code>增加简约风归档页面</code></li><li>分类页、标签页和<code>标签云</code>同一页面显示，集中展示</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等可自定义）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>类似于Python Django中<code>SLUG</code>用法的urlname</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</li></ul><p><a name="f26ef914"></a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 <code>Hexo</code> 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/hongweifuture/hexo-theme-halo/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-halo</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中，并修改主题配置项即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/hongweifuture/hexo-theme-halo.git themes/halo</code></pre><p><a name="224e2ccd"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>详情请参照 <a href="https://github.com/hongweifuture/hexo-theme-halo" target="_blank" rel="noopener">hexo-theme-halo</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Hexo </tag>
            
            <tag> 语雀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Actions：云打包创建 docker 镜像</title>
      <link href="/docker-build-image-github-actions/"/>
      <url>/docker-build-image-github-actions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>GitHub Actions是GitHub开源的一个平台。这一平台可以让开发者实现定制化的程序逻辑，而不需要专门创建一个应用去完成需要的任务。开发者可以借助 Actions 平台建立工作流，使用他们代码仓库中定义好的 action、或者 GitHub 公开代码库中的 action，甚至是一个公开的 Docker 容器镜像。action 在这里指的是开发、测试、部署和发布代码中的各种流程。在开发程序代码之外，有时候需要面对各种编译、测试和部署过程中的繁琐流程。这些流程往往需要手动完成，且由于不同开发者的开发环境、版本和平台不同，需要专门针对特定的环境定制工作流，十分麻烦。并且Github Actions平台是定制化的，可以使用 GitHub 的 API 和任何开源的第三方 API，以便于和代码库进行交互。</p></blockquote><p>对于<code>Github Actions</code>的使用在我博客中已经有很多的实例了，大家可以去看看。</p><p>对于<code>docker</code>的镜像打包也容易也复杂，容易的当然就是容器化本身就是简化操作，但是复杂一般来说就是生产环境和网络环境的配置，对于什么system其实大同小异，无论是centos、debian、macOS还有windows等等，环境搭建容易，但是一些可选包的安装需要一定的时间，网络环境就是速度慢，虽然可以通过“这样这样这样”访问墙外的地址，但是下载编译的时间也很慢，使用<code>Github Actions</code>可以说是一种推荐的选择了，因为其不需要物理机、不需要配置网络，毕竟其网络就是外外外网，所以下载速度还可以，原来还需要去更换源、使用加速，这回都不用了，而且我们从网页就可以进行操作。</p><p>其实2020年新升级的<code>全新Coding</code>也加入了持续集成功能，使用的是<code>Jenkinsfile</code>，我使用过jenkins但是对coding集成的还不熟悉，后面有时间在实践一下。</p><p><a name="e6cefb85"></a></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li>根据Dockerfile打包成镜像</li><li>镜像推送到阿里云容器仓库（docker hub 大同小异）</li></ul><p><a name="f630b9a4"></a></p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol><li>注册阿里云容器镜像服务</li><li>在阿里云创建命名空间、镜像仓库，注意地区的选择！！！</li><li><code>github</code>上创建仓库，私有公有看自己需求</li><li>本地<code>git</code>上传打包所需要的文件，如Dockerfile、requirements.txt、entrypoint.sh等等</li><li>在创建的创库中配置所需要的变量，要用到的私密信息，如账号密码之类</li><li>在创建的仓库中开启<code>Actions</code></li><li>配置<code>YAML格式</code>的Actions配置文件</li><li>打包开始并自动<code>PUSH</code>到阿里云仓库</li></ol><p><a name="424a2ad8"></a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>阿里云上自己操作</li><li>本地与<code>Github</code>的<code>SSH KEY密钥</code>配置</li><li>简单实例只用到阿里云的账号密码，故Github中<code>项目 --&gt; Setting --&gt; Secrets</code>定为<code>Aliyun_Username</code>和<code>Aliyun_Password</code>，填入自己信息</li><li>在创建的仓库中开启Actions会自动创建默认配置文件，即项目根目录下<code>./.github/workflows/main.yml</code>文件，在线修改即可，文件名可自定义</li></ul><p><a name="88815d3f"></a></p><h1 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h1><p>这里以一个例子说明，实现打包一个<code>python环境</code>的最小系统，里面包括我<code>django</code>博客中使用的python基础标准环境，安装<code>alpine</code>依赖：system update、system lib、mysqlclient、Pillow、bash</p><p>实现我的<code>django</code>镜像包，只需基于当前实例的最简python，安装所需要的python库，在配合<code>docker-compose</code>即可完成全部</p><p><a name="Dockerfile"></a></p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从仓库拉取 带有 python 3.7 的 Alpine Linux 环境</span>FROM python:3.7-alpine<span class="token comment" spellcheck="true"># 维护者信息</span>MAINTAINER  hongwei <span class="token string">"https://www.zhwei.cn/"</span><span class="token comment" spellcheck="true"># 添加alpine apk源，我在本地centos中添加索性就加上了，其实不加也行 </span>RUN <span class="token keyword">echo</span> <span class="token string">"http://mirrors.aliyun.com/alpine/latest-stable/community/"</span> <span class="token operator">>></span> /etc/apk/repositoriesRUN <span class="token keyword">echo</span> <span class="token string">"http://dl-cdn.alpinelinux.org/alpine/edge/community/"</span> <span class="token operator">>></span> /etc/apk/repositories<span class="token punctuation">;</span>RUN <span class="token keyword">echo</span> <span class="token string">"http://dl-2.alpinelinux.org/alpine/edge/community"</span> <span class="token operator">>></span> /etc/apk/repositories<span class="token punctuation">;</span>RUN <span class="token keyword">echo</span> <span class="token string">"http://dl-3.alpinelinux.org/alpine/edge/community"</span> <span class="token operator">>></span> /etc/apk/repositories<span class="token punctuation">;</span>RUN <span class="token keyword">echo</span> <span class="token string">"http://dl-4.alpinelinux.org/alpine/edge/community"</span> <span class="token operator">>></span> /etc/apk/repositories<span class="token punctuation">;</span>RUN <span class="token keyword">echo</span> <span class="token string">"http://dl-5.alpinelinux.org/alpine/edge/community"</span> <span class="token operator">>></span> /etc/apk/repositories<span class="token comment" spellcheck="true"># 安装alpine依赖，system update\ system lib\ mysqlclient\ Pillow\ bash</span>RUN apk update \    <span class="token operator">&amp;&amp;</span> apk add --no-cache linux-headers libffi-dev \    <span class="token operator">&amp;&amp;</span> apk add --no-cache gcc python3-dev musl-dev mariadb-dev\    <span class="token operator">&amp;&amp;</span> apk add --no-cache jpeg-dev zlib-dev freetype-dev lcms2-dev openjpeg-dev tiff-dev tk-dev tcl-dev \    <span class="token operator">&amp;&amp;</span> apk add --no-cache <span class="token function">bash</span> bash-doc bash-completion</code></pre><p><a name="main.yml"></a></p><h2 id="main-yml"><a href="#main-yml" class="headerlink" title="main.yml"></a>main.yml</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> CI Build python alpine 3.7<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">image-name</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>python<span class="token punctuation">]</span>        <span class="token key atrule">image-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>3.7<span class="token punctuation">-</span>alpine<span class="token punctuation">-</span>django<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker build and push aliyun      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">aliyun_username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.Aliyun_Username <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">aliyun_password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.Aliyun_Password <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        sudo docker login --username=${aliyun_username} registry.cn-beijing.aliyuncs.com --password=${{ secrets.aliyun_password }}        sudo docker build -t ${{ matrix.image-name }}:${{ matrix.image-version }} .        sudo docker tag ${{ matrix.image-name }}:${{ matrix.image-version }} registry.cn-beijing.aliyuncs.com/命名空间/镜像仓库:${{ matrix.image-version }}        sudo docker push registry.cn-beijing.aliyuncs.com/命名空间/镜像仓库:${{ matrix.image-version }}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 持续集成和交付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> docker </tag>
            
            <tag> 云打包创建镜像 </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HwTestReport：为unittest专属定制的测试报告</title>
      <link href="/hwttk-unittest-hwtestreport/"/>
      <url>/hwttk-unittest-hwtestreport/</url>
      
        <content type="html"><![CDATA[<p>作为 <a href="https://github.com/hongweifuture/HwTTK" target="_blank" rel="noopener">HwTTK（Test Tool Kit ）</a>中的一员，<code>HwTestReport</code>具有以下特性：</p><ul><li>支持<code>Python2</code>和<code>Python3</code>，自动兼容，无需设置</li><li>支持<code>中文</code>和<code>英文</code>手动切换</li><li>支持<code>Selenium</code>和<code>Appium</code>截图报告嵌入<code>Html</code>报告中，可根据需求设置开启或关闭截图展示功能</li><li>样式美化需要网络支持，采用CDN加持，如果本地使用请下载<code>离线版本</code></li><li>增加测试人员条目、通过率统计、所有可能情况筛选功能等</li><li>增加<code>饼图</code>数据展示、测试详情数据展示</li><li>增加<code>返回顶部</code>按钮</li><li>其他细节修改</li></ul><p>源自 <a href="http://tungwaiyip.info/software/HTMLTestRunner.html" target="_blank" rel="noopener">tungwaiyip.info</a> 的<code>0.82</code>版本 <code>HTMLTestRunner</code></p><p><a name="f7457af0"></a></p><h2 id="当前的环境"><a href="#当前的环境" class="headerlink" title="当前的环境"></a>当前的环境</h2><table><thead><tr><th>环境</th><th>版本</th></tr></thead><tbody><tr><td>Python2</td><td>2.7.17</td></tr><tr><td>Python3</td><td>3.7.4</td></tr><tr><td>selenium</td><td>3.141.0</td></tr><tr><td>geckodriver</td><td>v0.26.0</td></tr><tr><td>Firefox</td><td>72.0.1 (64 位)</td></tr></tbody></table><p><a name="715d8d1e"></a></p><h2 id="中英文报告实例"><a href="#中英文报告实例" class="headerlink" title="中英文报告实例"></a>中英文报告实例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token comment" spellcheck="true"># 中文 Chinese</span><span class="token keyword">from</span> HwTestReport <span class="token keyword">import</span> HTMLTestReport<span class="token comment" spellcheck="true"># 英文 English</span><span class="token keyword">from</span> HwTestReport <span class="token keyword">import</span> HTMLTestReportEN<span class="token keyword">class</span> <span class="token class-name">Case_assert_1</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">test_ok</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_faile</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_error</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token keyword">class</span> <span class="token class-name">Case_assert_2</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">test_ok</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Case_assert_3</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">test_error</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token keyword">class</span> <span class="token class-name">Case_assert_4</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">test_faile</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>Case_assert_1<span class="token punctuation">(</span><span class="token string">'test_ok'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>Case_assert_1<span class="token punctuation">(</span><span class="token string">'test_faile'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>Case_assert_1<span class="token punctuation">(</span><span class="token string">'test_error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>Case_assert_2<span class="token punctuation">(</span><span class="token string">'test_ok'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>Case_assert_3<span class="token punctuation">(</span><span class="token string">'test_error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>Case_assert_4<span class="token punctuation">(</span><span class="token string">'test_faile'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># English：HTMLTestReportEN</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./HwTestReport.html'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> report<span class="token punctuation">:</span>        runner <span class="token operator">=</span> HTMLTestReport<span class="token punctuation">(</span>stream<span class="token operator">=</span>report<span class="token punctuation">,</span>                                verbosity<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                                title<span class="token operator">=</span><span class="token string">'HwTestReport 测试'</span><span class="token punctuation">,</span>                                description<span class="token operator">=</span><span class="token string">'带饼图，带详情'</span><span class="token punctuation">,</span>                                tester<span class="token operator">=</span><span class="token string">'Johnny'</span><span class="token punctuation">)</span>        runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>suite<span class="token punctuation">)</span></code></pre><p><a name="7ff82bce"></a></p><h2 id="带截图的报告实例"><a href="#带截图的报告实例" class="headerlink" title="带截图的报告实例"></a>带截图的报告实例</h2><p>此截图功能是针对 <a href="https://selenium.dev/downloads/" target="_blank" rel="noopener">Selenium</a>和 <a href="http://appium.io/" target="_blank" rel="noopener">Appium</a>开发，支持<code>Python2</code>和<code>Python3</code>，不同的浏览器选择不同驱动</p><ul><li><p><code>Selenium</code></p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> seleniumconda <span class="token function">install</span> selenium</code></pre></li><li><p><code>Firefox</code></p><ul><li><a href="http://ftp.mozilla.org/pub/firefox/releases/" target="_blank" rel="noopener">火狐浏览器历史版本下载</a></li><li><a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">geckodriver驱动下载地址</a></li><li><a href="https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html" target="_blank" rel="noopener">驱动与浏览器版本对应关系总结</a></li></ul></li><li><p><code>Chrome</code>，对应版本请查看版本文件夹内的<code>note.txt</code></p><ul><li><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">chromedriver驱动官方下载地址</a></li><li><a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">chromedriver驱动淘宝下载地址</a></li><li><a href="https://google_chrome.en.downloadastro.com/old_versions/" target="_blank" rel="noopener">Chrome浏览器历史版本下载</a></li><li><a href="https://www.slimjet.com/chrome/google-chrome-old-version.php" target="_blank" rel="noopener">驱动与浏览器版本对应关系总结</a></li></ul></li><li><p><a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">IE浏览器驱动IEDriverServer</a></p></li><li><p><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" target="_blank" rel="noopener">Edge浏览器驱动MicrosoftWebDriver</a></p></li><li><p><a href="https://github.com/operasoftware/operachromiumdriver/releases" target="_blank" rel="noopener">Opera浏览器驱动operadriver</a></p></li><li><p><a href="https://phantomjs.org/" target="_blank" rel="noopener">PhantomJS浏览器驱动：phantomjs</a></p><blockquote><p>selenium已经放弃PhantomJS，使用需将<code>selenium</code>降级为<code>2.48.0</code>版本，或者使用火狐或者谷歌无界面浏览器，推荐<a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="noopener">Headless Chrome</a>，还是要了解一下<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode" target="_blank" rel="noopener">Headless Firefox</a></p></blockquote></li></ul><p>驱动需要放在和<code>python</code>启动文件在同一个目录，或添加环境变量，如</p><ul><li>windows：”D:\python\venv\Scripts\geckodriver.exe”</li><li>linux：”/opt/python/geckodriver.exe”</li></ul><p><a name="5f4ae1a6"></a></p><h3 id="截图功能使用"><a href="#截图功能使用" class="headerlink" title="截图功能使用"></a>截图功能使用</h3><ol><li><strong>增加 <code>images</code> 参数</strong>，默认为<code>False</code>，所以不需要截图可以不添加此参数，参考上面</li><li>初始化<code>imgs</code>，必须为<code>driver</code><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>imgs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># （可选）初始化截图列表</span>  self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> HwTestReport <span class="token keyword">import</span> HTMLTestReport<span class="token keyword">from</span> HwTestReport <span class="token keyword">import</span> HTMLTestReportEN<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">class</span> <span class="token class-name">Case_baidu</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    在python3中因为unittest运行机制变动，在使用setUp/tearDown中初始化/退出driver时，    可能会出现用例执行失败没有截图的问题，但我没有遇到过，如果出现请使用setUpClass/tearDownClass的用法    '''</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_screenshot</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>imgs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get_screenshot_as_base64<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">test_baidu_search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''用例通过，没有报告内容，有多张截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>u<span class="token string">'百度一下'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_baidu_assert_ok</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''用例通过，有报告内容，有截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>        hao123 <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="u1"]/a[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>hao123<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>hao123<span class="token punctuation">,</span> <span class="token string">'hao123'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_baidu_assert_ok_noimg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''用例通过，有报告内容，没有截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>        news <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="u1"]/a[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>news<span class="token punctuation">,</span> u<span class="token string">"新闻"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_baidu_assert_faile</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''用例失败，带有失败内容和截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        news <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="u1"]/a[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="u1"]/a[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>news<span class="token punctuation">,</span> <span class="token string">'hao123'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_baidu_assert_error</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">''''用例错误，带有指定错误内容和截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> EnvironmentError<span class="token punctuation">(</span><span class="token string">'Current environment can not testing!'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Case_qq</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_qq_index_faile</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''用例错误，带有错误内容和没有截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.qq.com"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'sougouTxt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>u<span class="token string">'搜狗搜索'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.driver.find_element_by_id('sougouTxt').send_keys(u'搜狗搜索')</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'searchBtn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIn<span class="token punctuation">(</span>u<span class="token string">"搜狗"</span><span class="token punctuation">,</span> u<span class="token string">'搜索'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_qq_index_ok</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''用例通过，没有内容和没有截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.qq.com"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'sougouTxt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>u<span class="token string">'搜狗搜索'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'searchBtn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Case_163</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_163_ok</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''通过 没有内容和截图'''</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.163.com/"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    suite1 <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loadTestsFromTestCase<span class="token punctuation">(</span>Case_baidu<span class="token punctuation">)</span>    suite2 <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loadTestsFromTestCase<span class="token punctuation">(</span>Case_qq<span class="token punctuation">)</span>    suite3 <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loadTestsFromTestCase<span class="token punctuation">(</span>Case_163<span class="token punctuation">)</span>    suites <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>    suites<span class="token punctuation">.</span>addTests<span class="token punctuation">(</span><span class="token punctuation">[</span>suite1<span class="token punctuation">,</span> suite2<span class="token punctuation">,</span> suite3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># HTMLTestReport or HTMLTestReportEN</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./HwTestReportIMG.html'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> report<span class="token punctuation">:</span>        runner <span class="token operator">=</span> HTMLTestReportEN<span class="token punctuation">(</span>stream<span class="token operator">=</span>report<span class="token punctuation">,</span>                                verbosity<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                                images<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                title<span class="token operator">=</span><span class="token string">'HwTestReport 测试'</span><span class="token punctuation">,</span>                                description<span class="token operator">=</span><span class="token string">'带截图，带饼图，带详情'</span><span class="token punctuation">,</span>                                tester<span class="token operator">=</span><span class="token string">'Johnny'</span><span class="token punctuation">)</span></code></pre><p><a name="5235bc34"></a></p><h2 id="离线报告"><a href="#离线报告" class="headerlink" title="离线报告"></a>离线报告</h2><p>使用方法和上述一致，只是选择带<code>local</code>的版本即可，美化所需的样式在<code>/static/</code>目录下，故<code>/static/</code>目录要和<code>生成的报告在相同目录</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> HwTestReport_local <span class="token keyword">import</span> HTMLTestReport<span class="token keyword">from</span> HwTestReport_local <span class="token keyword">import</span> HTMLTestReportEN</code></pre><p><a name="19ef7f9b"></a></p><h2 id="关键字说明"><a href="#关键字说明" class="headerlink" title="关键字说明"></a>关键字说明</h2><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>HTMLTestReport.py</td><td>源文件</td></tr><tr><td>HTMLTestReport_local.py</td><td>离线源文件</td></tr><tr><td>HTMLTestReport</td><td>生成中文报告的类</td></tr><tr><td>HTMLTestReportEN</td><td>生成英文报告的类</td></tr><tr><td>stream</td><td>生成的报告文件</td></tr><tr><td>verbosity</td><td>运行之后打印的格式，默认值为1，有0，1，2三个值，<br />0 (静默模式): 你只能获得总的测试用例数和总的结果 比如 总共100个 失败20 成功80<br />)1 (默认模式): 非常类似静默模式 只是在每个成功的用例前面有个“.” 每个失败的用例前面有个 “F”<br />2 (详细模式):测试结果会显示每个测试用例的所有相关的信息,并且你在命令行里加入不同的参数可以起到一样的效果，<br />源码在/Lib/unittest/runner.py</td></tr><tr><td>images</td><td>True 为开启Selenium或Appium截图，False或不填为关闭截图模式</td></tr><tr><td>title</td><td>标题，不填默认为“测试报告”</td></tr><tr><td>description</td><td>描述，不填默认为空</td></tr><tr><td>tester</td><td>测试人员，不填默认为“Johnny”</td></tr></tbody></table><p><a name="645dbc55"></a></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/project/20200114113847.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/project/20200114102851.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/project/20200114113514.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/373062/1581754110301-9cc7a54c-c520-4eb1-8057-cbed51568b51.png#align=left&display=inline&height=768&originHeight=768&originWidth=1366&size=0&status=done&style=none&width=1366" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/373062/1581754110335-25228bae-5ea7-42a4-ad1d-fcd75662057a.png#align=left&display=inline&height=768&originHeight=768&originWidth=1366&size=0&status=done&style=none&width=1366" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/373062/1581754110321-e40d8ba9-5086-4084-b6c4-62d3fcf8a800.png#align=left&display=inline&height=768&originHeight=768&originWidth=1366&size=0&status=done&style=none&width=1366" alt=""></p><p>欢迎关注：</p><ul><li><a href="https://github.com/hongweifuture/HwTestReport" target="_blank" rel="noopener">该项目所在Github及源码下载地址</a></li><li><a href="https://github.com/hongweifuture" target="_blank" rel="noopener">Github</a></li><li><a href="https://blog.csdn.net/z_johnny" target="_blank" rel="noopener">CSDN</a></li><li><a href="https://www.zhwei.cn/">My Blog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HwTTK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> HTMLTestRunner </tag>
            
            <tag> unittest </tag>
            
            <tag> Appium </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Actions：通过 SSH 自动部署 Hexo</title>
      <link href="/github-actions-deploy-hexo-ssh/"/>
      <url>/github-actions-deploy-hexo-ssh/</url>
      
        <content type="html"><![CDATA[<p><a name="be033ff6"></a></p><h2 id="Hexo的自动部署"><a href="#Hexo的自动部署" class="headerlink" title="Hexo的自动部署"></a>Hexo的自动部署</h2><p>目前的主流方式：</p><ul><li>Travis CI：travis-ci.org 专门针对开源项目，Github 上所有的公开仓库都能够免费使用；travis-ci.com 针对私有及商业项目，新用户前 100 次构建是免费的，后面就要收费了。现在github私有库已经免费了！！！</li><li>Githooks： 这个如果 vps 本地部署，配合 nginx ，还是很推荐的</li><li>Github Actions： 持续集成，自动执行软件开发工作流程</li></ul><p><a name="f411d0f1"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>前一阵玩<code>docker</code>的时候用<code>docker</code>搭建了<code>Hexo</code>环境，感觉像<code>Hexo</code>的环境搭建使用<code>docker</code>好笨重</p><p>本次使用的是Github Actions，就是因为其简单、无需VPS、公有仓库免费、私有仓库每个月2000分钟、还能体验这个新功能，我采用的是deploy的方式，所以公有仓库就看你的需求了，可以是github page、gitlab、coding、gitee、vps等等，这里以github举例。</p><p>因为是deploy方式，所以要安装插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>同时在Hexo项目根目录配置文件<code>_config.yaml</code>中配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>Github用户名/Github用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><p><a name="cbb060fd"></a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>私有仓库： blog</li></ul><blockquote><p>这里是存放 Hexo 博客源码的</p></blockquote><ul><li>公有仓库： 用户名.github.io</li></ul><blockquote><p>这里是用来 public 静态页面的，要求<code>空</code>仓库，没有初始化及任何操作的</p></blockquote><p>所以如果你还没有创建 Hexo ，请参考 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方快速开始文档</a></p><p><a name="8128f7b3"></a></p><h2 id="密钥准备"><a href="#密钥准备" class="headerlink" title="密钥准备"></a>密钥准备</h2><p>为了方便运行GitHub Actions时登录GitHub账号，我们使用SSH方式登录。就是要把设备的私钥交给GitHub Actions，公钥交给GitHub，需要去Settings里去配置。</p><p>使用ssh-keygen生成一组公私秘钥对</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"Github 的邮箱地址"</span>如 ssh-keygen -t rsa -C <span class="token string">"123123123@gmail.com"</span></code></pre><ul><li>配置公钥，应该已经配好，不然如何上到的项目资源，配置路径：github网站–&gt;Settings–&gt;SSH and GPG keys</li><li>配置私钥，blog私有仓库的Settings-&gt;Secrets里添加私钥，名称为<code>HEXO_DEPLOY_PRIVATE_KEY</code></li></ul><p><a name="4e4974c1"></a></p><h2 id="配置GitHub-Actions"><a href="#配置GitHub-Actions" class="headerlink" title="配置GitHub Actions"></a>配置GitHub Actions</h2><p>GitHub Actions 有一些自己的术语。</p><ul><li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li><li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li><li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li><li>action （动作）：每个 step 可以依次执行一个或多个命令（action）。</li></ul><p>在blog仓库的Actions选项卡下点击新建workflow，名称默认或者自定义修改，编写如下配置。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># workflow name</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Blog CI<span class="token comment" spellcheck="true"># master branch on push, auto run</span><span class="token key atrule">on</span><span class="token punctuation">:</span>   <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>     <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest     <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>    <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master     <span class="token comment" spellcheck="true"># from: https://github.com/actions/setup-node  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js 10.x       <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"10.x"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Hexo Dependencies      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        npm install hexo-cli -g        npm install</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Deploy Private Key      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">HEXO_DEPLOY_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.HEXO_DEPLOY_PRIVATE_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$HEXO_DEPLOY_PRIVATE_KEY" > ~/.ssh/id_rsa         chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com >> ~/.ssh/known_hosts</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Git Infomation      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">         git config --global user.name 'Github用户名'         git config --global user.email 'Github注册邮箱'</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Hexo       <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        hexo clean        hexo generate         hexo deploy</span></code></pre><p>这些命令不需注释都可以看懂吧，如果想发布到VPS，只需执行run命令即可</p>]]></content>
      
      
      <categories>
          
          <category> 持续集成和交付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI/CD </tag>
            
            <tag> SSH </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Actions：通过 API 自动部署 Hexo</title>
      <link href="/github-actions-deploy-hexo-api/"/>
      <url>/github-actions-deploy-hexo-api/</url>
      
        <content type="html"><![CDATA[<p><a name="be033ff6"></a></p><h2 id="Hexo的自动部署"><a href="#Hexo的自动部署" class="headerlink" title="Hexo的自动部署"></a>Hexo的自动部署</h2><p>目前的主流方式：</p><ul><li>Travis CI：travis-ci.org 专门针对开源项目，Github 上所有的公开仓库都能够免费使用；travis-ci.com 针对私有及商业项目，新用户前 100 次构建是免费的，后面就要收费了。现在github私有库已经免费了！！！</li><li>Githooks： 这个如果 vps 本地部署，配合 nginx ，还是很推荐的</li><li>Github Actions： 持续集成，自动执行软件开发工作流程</li></ul><p><a name="f411d0f1"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>前一阵玩<code>docker</code>的时候用<code>docker</code>搭建了<code>Hexo</code>环境，感觉像<code>Hexo</code>的环境搭建使用<code>docker</code>好笨重</p><p>本次使用的是<code>Github Actions</code>，就是因为其简单、无需VPS、公有仓库免费、私有仓库每个月2000分钟、还能体验这个新功能，本文采用的是<code>API</code>推送的方式，免去需要物理机申请ssh key的步骤，如果习惯了采用<code>SSH</code>方式，你可以去看看我的另外一篇文章<a href="https://www.zhwei.cn/github-actions-deploy-hexo-ssh/">Github Actions 通过 SSH 自动部署 Hexo</a>。</p><p>静态网站部署其实哪家的Pages都可以，可以是github page、gitlab、coding、gitee、vps等等，这里以github和coding举例。</p><p><a name="cbb060fd"></a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>流程：博客源码通过本地<code>git</code>备份到<code>blog</code>库，<code>Github Actions</code>监控<code>github</code>的<code>PUSH</code>会自动进行部署，发布到<code>Github Pages</code>和<code>Coding Pages</code></p><ul><li>私有仓库： blog</li></ul><blockquote><p>这里是存放 Hexo 博客源码的</p></blockquote><ul><li>公有仓库： 用户名.github.io</li></ul><blockquote><p>这里是用来 public 静态页面的 Pages 仓库</p></blockquote><ul><li>公有仓库： 用户名.coding.me</li></ul><blockquote><p>这里是用来 public 静态页面的 Pages 仓库</p></blockquote><p>所以如果你还没有创建 Hexo ，请参考 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方快速开始文档</a></p><p><a name="bf85b970"></a></p><h2 id="API-密钥申请"><a href="#API-密钥申请" class="headerlink" title="API 密钥申请"></a>API 密钥申请</h2><p><a name="df663dab"></a></p><h3 id="github申请"><a href="#github申请" class="headerlink" title="github申请"></a>github申请</h3><ul><li>路径：Settings –&gt; Developer settings –&gt; Personal access tokens –&gt; Generate new token</li><li>勾选<code>repo</code>所有的权限，即repo:status、repo_deployment、public_repo和 repo:invite</li><li>可参考<a href="https://developer.github.com/" target="_blank" rel="noopener">GitHub API</a> 和 <a href="https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/" target="_blank" rel="noopener">OAuth scopes权限说明</a></li></ul><blockquote><p>这里的<code>token</code>只显示一次，请先保存下来在关闭网页，否则只能重新生成</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/githubpat.png" alt=""><br><a name="124633ce"></a></p><h3 id="coding申请"><a href="#coding申请" class="headerlink" title="coding申请"></a>coding申请</h3><p>最近coding和腾讯云开发者合并为全新coding，有好多的变化，我是2020年01月19日升级的，这里我以全新coding来说明，对于推送和拉取只有格式的区别.截至目前我只有coding的升级了腾讯云开发者的还没有升级。</p><ul><li>路径：个人设置 –&gt; 访问令牌 –&gt; 新建令牌</li><li>勾选<code>project:depot</code>权限，即完整的仓库控制权限，可读可写</li><li>可参考<a href="https://help.coding.net/docs/member/tokens.html" target="_blank" rel="noopener">Coding API</a> 和 <a href="https://open.coding.net/oauth/#%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">OAuth scopes权限说明</a></li></ul><blockquote><p>这里的<code>token</code>只显示一次，请先保存下来在关闭网页，否则只能重新生成，这里还有一个<code>令牌用户名</code>需要记下来，最好用这个替换<code>coding用户名</code>操作</p></blockquote><p><a name="c98bfada"></a></p><h2 id="API-密钥添加"><a href="#API-密钥添加" class="headerlink" title="API 密钥添加"></a>API 密钥添加</h2><ul><li>配置仓库私钥，blog私有仓库的 Settings –&gt; Secrets 里添加私钥<code>Secrets</code>，以下面名称命名，输入对应的值</li><li>token_CodingAPI</li><li>token_GithubAPI</li><li>Username_Coding</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hongweifuture/jsDelivrCDN/img/G7.png" alt=""></p><p><a name="4e4974c1"></a></p><h2 id="配置GitHub-Actions"><a href="#配置GitHub-Actions" class="headerlink" title="配置GitHub Actions"></a>配置GitHub Actions</h2><p>GitHub Actions 有一些自己的术语。</p><ul><li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li><li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li><li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li><li>action （动作）：每个 step 可以依次执行一个或多个命令（action）。</li></ul><p>在blog仓库的Actions选项卡下点击新建workflow，名称默认或者自定义修改，编写如下配置。</p><p><strong>这里需要注意一下，两种情况</strong></p><ol><li>如果你的 Pages 仓库是<code>空</code>的，没有进行过初始化和任何操作，请执行<code>**第一次运行**</code>和<code>**第二次及以后运行**</code></li><li>如果你的 Pages 仓库<code>不是空</code>的，也就是说有内容，或者说你现在只是在现有的 Pages 仓库中进行升级，那就只运行<code>**第二次及以后运行**</code></li><li>说明：<code>**第一次运行**</code>和<code>**第二次及以后运行**</code>只有<code>分支操作的区别，其他无区别</code>，<strong>第一次有 -b</strong>，<strong>*第二次没有</strong></li></ol><ul><li><code>git checkout master</code>：切换分支</li><li><code>git checkout -b master</code>：创建并切换分支</li></ul><p><a name="70b86568"></a></p><h3 id="第一次运行"><a href="#第一次运行" class="headerlink" title="第一次运行"></a>第一次运行</h3><p>我的<code>Github</code>和<code>Coding</code>的<code>git</code>信息一样，如果你不一样，请分开写，<code>空仓库</code>第一次是<code>git checkout -b master</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># workflow name</span><span class="token key atrule">name</span><span class="token punctuation">:</span> CI Hexo Blog Deploy First<span class="token comment" spellcheck="true"># master branch on push, auto run</span><span class="token key atrule">on</span><span class="token punctuation">:</span>   <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Deploy-Pages</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Hexo Public To Pages    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest     <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>    <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master     <span class="token comment" spellcheck="true"># from: https://github.com/actions/setup-node  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js 10.x       <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"10.x"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Git Infomation      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">         git config --global user.name '用户名'         git config --global user.email '邮箱'  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get Latest Commit Message       <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git log --pretty=format:"%s from Github Actions at `date +"%Y-%m-%d %H:%M:%S"`" --date=short -n 1  > commit-message.log</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Hexo Dependencies      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        npm install hexo-cli -g        npm install</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate public files      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        hexo clean        hexo generate </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy To Github Pages       <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Github_Pages</span><span class="token punctuation">:</span> github.com/用户名/用户名.github.io        <span class="token key atrule">Github_Token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.token_GithubAPI <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git clone https://${Github_Pages} .github_pages        cd .github_pages        git checkout -b master        cd ../        mv .github_pages/.git/ ./public/        cd ./public/        git add .        git commit -F ../commit-message.log        git push --force --quiet "https://${Github_Token}@${Github_Pages}" master:master</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy To Coding Pages       <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Coding_Pages</span><span class="token punctuation">:</span> e.coding.net/用户名/用户名.coding.me.git        <span class="token key atrule">Coding_Token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.token_CodingAPI <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">Coding_Username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.Username_Coding <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git clone https://${Coding_Username}:${Coding_Token}@${Coding_Pages} .coding_pages        cd .coding_pages        git checkout -b master        cd ../        rm -r ./public/.git/        mv .coding_pages/.git/ ./public/        cd ./public/        git add .        git commit -F ../commit-message.log        git push --force --quiet "https://${Coding_Username}:${Coding_Token}@${Coding_Pages}" master:master</span></code></pre><p>老版本的coding与新版本的区别：</p><ul><li>老：<code>https://@${Coding_Pages}</code></li><li>新：<code>https://${Coding_Username}:${Coding_Token}@${Coding_Pages}</code></li></ul><p><a name="bfd51637"></a></p><h3 id="第二次及以后运行"><a href="#第二次及以后运行" class="headerlink" title="第二次及以后运行"></a>第二次及以后运行</h3><p><code>不是空</code>仓库或者是<code>**第一次运行**</code>之后，是<code>git checkout master</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># workflow name</span><span class="token key atrule">name</span><span class="token punctuation">:</span> CI Hexo Blog Deploy LTS<span class="token comment" spellcheck="true"># master branch on push, auto run</span><span class="token key atrule">on</span><span class="token punctuation">:</span>   <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Deploy-Pages</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Hexo Public To Pages    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest     <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>    <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master     <span class="token comment" spellcheck="true"># from: https://github.com/actions/setup-node  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js 10.x       <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"10.x"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Git Infomation      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">         git config --global user.name '用户名'         git config --global user.email '邮箱'  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get Latest Commit Message       <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git log --pretty=format:"%s from Github Actions at `date +"%Y-%m-%d %H:%M:%S"`" --date=short -n 1  > commit-message.log</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Hexo Dependencies      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        npm install hexo-cli -g        npm install</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate public files      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        hexo clean        hexo generate </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy To Github Pages       <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Github_Pages</span><span class="token punctuation">:</span> github.com/用户名/用户名.github.io        <span class="token key atrule">Github_Token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.token_GithubAPI <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git clone https://${Github_Pages} .github_pages        cd .github_pages        git checkout master        cd ../        mv .github_pages/.git/ ./public/        cd ./public/        git add .        git commit -F ../commit-message.log        git push --force --quiet "https://${Github_Token}@${Github_Pages}" master:master</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy To Coding Pages       <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Coding_Pages</span><span class="token punctuation">:</span> e.coding.net/用户名/用户名.coding.me.git        <span class="token key atrule">Coding_Token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.token_CodingAPI <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">Coding_Username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.Username_Coding <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git clone https://${Coding_Username}:${Coding_Token}@${Coding_Pages} .coding_pages        cd .coding_pages        git checkout master        cd ../        rm -r ./public/.git/        mv .coding_pages/.git/ ./public/        cd ./public/        git add .        git commit -F ../commit-message.log        git push --force --quiet "https://${Coding_Username}:${Coding_Token}@${Coding_Pages}" master:master</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 持续集成和交付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Hexo </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Actions：通过 SSH 自动备份代码到托管网站</title>
      <link href="/github-actions-backup-code/"/>
      <url>/github-actions-backup-code/</url>
      
        <content type="html"><![CDATA[<p><a name="e6cefb85"></a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>每次像把源码放在不同平台都要进行如下操作：</p><ul><li>准备一台物理机，创建密钥并配置对应网站的公钥</li><li>多平台需要多次clone、pull、push</li><li>换物理机还要重新配置密钥，是所有网站的密钥</li><li>不用物理机用docker也要安装docker环境</li></ul><p>通过Github Actions持续集成可实现：</p><ul><li>一次clone、pull、push，多平台同布</li><li>配置对应网站的公钥只需配置一次</li><li>换设备只需配置Github和本机的密钥</li></ul><p><a name="f411d0f1"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>前一阵玩<code>docker</code>的时候用<code>docker</code>搭建了<code>Hexo</code>环境，感觉像<code>Hexo</code>的环境搭建使用<code>docker</code>好笨重</p><p>本次使用的是Github Actions，就是因为其简单、无需VPS、公有仓库免费、私有仓库每个月2000分钟、还能体验这个新功能。本文主要来使得github仓库的内容备份到其他代码托管平台，可以是github page、gitlab、coding、gitee、vps等等，这里以coding、gitee举例。</p><p><a name="cbb060fd"></a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Github仓库：blog</li></ul><blockquote><p>这里是存放源码的</p></blockquote><ul><li>Coding仓库：blog</li></ul><blockquote><p>这里是用来存放备份的源码，要求<code>空</code>仓库，没有初始化及任何操作的</p></blockquote><ul><li>Gitee仓库： blog</li></ul><blockquote><p>这里是用来存放备份的源码，要求<code>空</code>仓库，没有初始化及任何操作的</p></blockquote><p><a name="8128f7b3"></a></p><h2 id="密钥准备"><a href="#密钥准备" class="headerlink" title="密钥准备"></a>密钥准备</h2><p>为了方便运行GitHub Actions时登录GitHub账号，我们使用SSH方式登录。就是要把设备的私钥交给GitHub Actions，公钥交给GitHub，需要去Settings里去配置。</p><p>使用ssh-keygen生成一组公私秘钥对</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"Github 的邮箱地址"</span>如 ssh-keygen -t rsa -C <span class="token string">"123123123@gmail.com"</span></code></pre><p><strong>生成的密钥一定要保存好了，最重要的是私钥</strong></p><ul><li>配置公钥，应该已经配好，不然如何上到的项目资源，配置路径：github网站–&gt;Settings–&gt;SSH and GPG keys</li><li>配置仓库私钥，blog私有仓库的 Settings –&gt; Secrets 里添加私钥<code>Secrets</code>，以下面名称命名，输入对应的值，这个值就是<code>私钥</code>！</li><li>token_Private_Keys</li></ul><p><a name="4e4974c1"></a></p><h2 id="配置GitHub-Actions"><a href="#配置GitHub-Actions" class="headerlink" title="配置GitHub Actions"></a>配置GitHub Actions</h2><p>GitHub Actions 有一些自己的术语。</p><ul><li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li><li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li><li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li><li>action （动作）：每个 step 可以依次执行一个或多个命令（action）。</li></ul><p>在blog仓库的Actions选项卡下点击新建workflow，名称默认或者自定义修改，编写如下配置。</p><p><strong>这里分为两次，区别只有分支操作的区别，这也是为什么前面说要创建空仓库！！</strong></p><ul><li><code>git checkout master</code>：切换分支</li><li><code>git checkout -b master</code>：创建并切换分支</li></ul><p><a name="70b86568"></a></p><h3 id="第一次运行"><a href="#第一次运行" class="headerlink" title="第一次运行"></a>第一次运行</h3><p>我的<code>Github</code>和<code>Coding</code>的<code>git</code>信息一样，如果你不一样，请分开写</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># workflow name</span><span class="token key atrule">name</span><span class="token punctuation">:</span> CI Backup First<span class="token comment" spellcheck="true"># master branch on push, auto run</span><span class="token key atrule">on</span><span class="token punctuation">:</span>   <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Backup</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Backup To Private Project     <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest     <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>    <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Git Infomation      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">         git config --global user.name '用户名'         git config --global user.email '邮箱'  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup SSH Private Key      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">token_Private_Keys</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.token_Private_Keys <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$token_Private_Keys" > ~/.ssh/id_rsa         chmod 600 ~/.ssh/id_rsa        ssh-keyscan gitee.com >> ~/.ssh/known_hosts        ssh-keyscan e.coding.net >> ~/.ssh/known_hosts</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get Latest Commit Message       <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git log --pretty=format:"%s from Github Actions at `date +"%Y-%m-%d %H:%M:%S"`" --date=short -n 1  > commit-message.log</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Backup To Gitee Private Project      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Gitee_Blog</span><span class="token punctuation">:</span> gitee.com<span class="token punctuation">:</span>用户名/blog.git      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git clone git@${Gitee_Blog} .gitee_blog        cd .gitee_blog        git checkout -b master        cd ../        \cp -rf ./* ./.gitee_blog/        cd .gitee_blog        git add .        git commit -F ../commit-message.log        git push --force --quiet "git@${Gitee_Blog}" master:master</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Backup To Coding Private Project      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Coding_Blog</span><span class="token punctuation">:</span> e.coding.net<span class="token punctuation">:</span>用户名/blog.git      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git clone git@${Coding_Blog} .coding_blog        cd .coding_blog        git checkout -b master        cd ../        \cp -rf ./* ./.coding_blog/        cd .coding_blog        git add .        git commit -F ../commit-message.log        git push --force --quiet "git@${Coding_Blog}" master:master</span></code></pre><p>老版本的coding与新版本的区别：</p><ul><li>老：<code>ssh-keyscan git.coding.net &gt;&gt; ~/.ssh/known_hosts</code></li><li>新：<code>ssh-keyscan e.coding.net &gt;&gt; ~/.ssh/known_hosts</code></li></ul><p><a name="bfd51637"></a></p><h3 id="第二次及以后运行"><a href="#第二次及以后运行" class="headerlink" title="第二次及以后运行"></a>第二次及以后运行</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># workflow name</span><span class="token key atrule">name</span><span class="token punctuation">:</span> CI Backup LTS<span class="token comment" spellcheck="true"># master branch on push, auto run</span><span class="token key atrule">on</span><span class="token punctuation">:</span>   <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Backup</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Backup To Private Project     <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest     <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>    <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Git Infomation      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">         git config --global user.name '用户名'         git config --global user.email '邮箱'  </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup SSH Private Key      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">token_Private_Keys</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.token_Private_Keys <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$token_Private_Keys" > ~/.ssh/id_rsa         chmod 600 ~/.ssh/id_rsa        ssh-keyscan gitee.com >> ~/.ssh/known_hosts        ssh-keyscan e.coding.net >> ~/.ssh/known_hosts</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get Latest Commit Message       <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git log --pretty=format:"%s from Github Actions at `date +"%Y-%m-%d %H:%M:%S"`" --date=short -n 1  > commit-message.log</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Backup To Gitee Private Project      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Gitee_Blog</span><span class="token punctuation">:</span> gitee.com<span class="token punctuation">:</span>用户名/blog.git      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git clone git@${Gitee_Blog} .gitee_blog        cd .gitee_blog        git checkout master        cd ../        \cp -rf ./* ./.gitee_blog/        cd .gitee_blog        git add .        git commit -F ../commit-message.log        git push --force --quiet "git@${Gitee_Blog}" master:master</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Backup To Coding Private Project      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">Coding_Blog</span><span class="token punctuation">:</span> e.coding.net<span class="token punctuation">:</span>用户名/blog.git      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git clone git@${Coding_Blog} .coding_blog        cd .coding_blog        git checkout master        cd ../        \cp -rf ./* ./.coding_blog/        cd .coding_blog        git add .        git commit -F ../commit-message.log        git push --force --quiet "git@${Coding_Blog}" master:master</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 持续集成和交付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> CI/CD </tag>
            
            <tag> SSH </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 教程：增删改查</title>
      <link href="/databases-mysql-normal-operate/"/>
      <url>/databases-mysql-normal-operate/</url>
      
        <content type="html"><![CDATA[<p><a name="b9cdb1ae"></a></p><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> JOHNNY <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  sid <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">000</span><span class="token punctuation">,</span>  NAME CHAR<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">111</span><span class="token punctuation">,</span>  price <span class="token keyword">DECIMAL</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">DEFAULT</span> <span class="token number">222</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="4b38aeae"></a></p><h1 id="增，添加数据"><a href="#增，添加数据" class="headerlink" title="增，添加数据"></a>增，添加数据</h1><p><a name="6af47e71"></a></p><h2 id="语法1：指定所有字段名"><a href="#语法1：指定所有字段名" class="headerlink" title="语法1：指定所有字段名"></a>语法1：指定所有字段名</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>  表名（字段名<span class="token number">1</span>，字段名<span class="token number">2</span>，…）<span class="token keyword">VALUES</span>（值<span class="token number">1</span>，值<span class="token number">2</span>，…）；<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> JOHNNY <span class="token punctuation">(</span>ID<span class="token punctuation">,</span> SID<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> PRICE<span class="token punctuation">)</span><span class="token keyword">VALUES</span>  <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token number">12.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">110</span>    J    <span class="token number">12.60</span></code></pre><p><a name="2145f86c"></a></p><h2 id="语法2：不指定字段名，添加的值的顺序应和字段在表中的顺序完全一致"><a href="#语法2：不指定字段名，添加的值的顺序应和字段在表中的顺序完全一致" class="headerlink" title="语法2：不指定字段名，添加的值的顺序应和字段在表中的顺序完全一致"></a>语法2：不指定字段名，添加的值的顺序应和字段在表中的顺序完全一致</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>  表名 <span class="token keyword">VALUES</span>（值<span class="token number">1</span>，值<span class="token number">2</span>，…）；<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> JOHNNY<span class="token keyword">VALUES</span>  <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token number">12.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">110</span>    J    <span class="token number">12.60</span><span class="token number">2</span>    <span class="token number">120</span>    H    <span class="token number">12.90</span></code></pre><p><a name="8c8d8f1d"></a></p><h2 id="语法3：指定字段添加值，其他字段为默认值"><a href="#语法3：指定字段添加值，其他字段为默认值" class="headerlink" title="语法3：指定字段添加值，其他字段为默认值"></a>语法3：指定字段添加值，其他字段为默认值</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>  表名（字段名<span class="token number">1</span>）<span class="token keyword">VALUES</span>（值<span class="token number">1</span>）；<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> JOHNNY <span class="token punctuation">(</span>ID<span class="token punctuation">)</span><span class="token keyword">VALUES</span>  <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">110</span>    J    <span class="token number">12.60</span><span class="token number">2</span>    <span class="token number">120</span>    H    <span class="token number">12.90</span><span class="token number">3</span>   <span class="token number">0</span>  <span class="token number">111</span> <span class="token number">222.00</span></code></pre><p><a name="a09fec6d"></a></p><h2 id="语法4：set写法"><a href="#语法4：set写法" class="headerlink" title="语法4：set写法"></a>语法4：set写法</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">SET</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span>，…<span class="token punctuation">]</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> JOHNNY <span class="token keyword">SET</span> ID <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>sid <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">,</span>NAME <span class="token operator">=</span> <span class="token string">'Y'</span><span class="token punctuation">,</span>PRICE <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">110</span>    J    <span class="token number">12.60</span><span class="token number">2</span>    <span class="token number">120</span>    H    <span class="token number">12.90</span><span class="token number">3</span>   <span class="token number">0</span>  <span class="token number">111</span> <span class="token number">222.00</span><span class="token number">4</span>  <span class="token number">140</span>  Y  <span class="token number">15.00</span></code></pre><p><a name="a9c57278"></a></p><h1 id="删，删除数据"><a href="#删，删除数据" class="headerlink" title="删，删除数据"></a>删，删除数据</h1><p>语法：DELETE FROM 表名 WHERE 条件表达式</p><p><a name="2cdee9d1"></a></p><h2 id="删除指定数据"><a href="#删除指定数据" class="headerlink" title="删除指定数据"></a>删除指定数据</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> JOHNNY <span class="token keyword">WHERE</span> ID <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">110</span>    J    <span class="token number">12.60</span><span class="token number">2</span>    <span class="token number">120</span>    H    <span class="token number">12.90</span><span class="token number">3</span>   <span class="token number">0</span>  <span class="token number">111</span> <span class="token number">222.00</span></code></pre><p><a name="a8b68389"></a></p><h2 id="删除全部数据-DELETE"><a href="#删除全部数据-DELETE" class="headerlink" title="删除全部数据 DELETE"></a>删除全部数据 DELETE</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> JOHNNY<span class="token punctuation">;</span></code></pre><blockquote><p>原表有3行数据，其中id为自增字段，如id为3，全删除后重新插入数据，会从id为4的那一行开始添加，相当于追加</p></blockquote><p><a name="e230778b"></a></p><h2 id="删除全部数据-TRUNCATE"><a href="#删除全部数据-TRUNCATE" class="headerlink" title="删除全部数据 TRUNCATE"></a>删除全部数据 TRUNCATE</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> JOHNNY<span class="token punctuation">;</span></code></pre><blockquote><p>原表有3行数据，其中id为自增字段，如id为3，全删除后重新插入数据，会从id为0的哪一行开始添加，相当于从头开始</p></blockquote><p><a name="9b37271b"></a></p><h1 id="改，修改更新数据"><a href="#改，修改更新数据" class="headerlink" title="改，修改更新数据"></a>改，修改更新数据</h1><p>语法：UPDATE 表名 SET 内容 WHERE 条件表达式</p><p><a name="0fc15f25"></a></p><h2 id="修改指定内容"><a href="#修改指定内容" class="headerlink" title="修改指定内容"></a>修改指定内容</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span>  JOHNNY<span class="token keyword">SET</span>  SID <span class="token operator">=</span> <span class="token number">555</span><span class="token keyword">WHERE</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">110</span>    J    <span class="token number">12.60</span><span class="token number">2</span>    <span class="token number">120</span>    H    <span class="token number">12.90</span><span class="token number">3</span>   <span class="token number">555</span>  <span class="token number">111</span> <span class="token number">222.00</span></code></pre><p><a name="90b49acd"></a></p><h2 id="修改全部内容"><a href="#修改全部内容" class="headerlink" title="修改全部内容"></a>修改全部内容</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span>  JOHNNY<span class="token keyword">SET</span>  NAME <span class="token operator">=</span> <span class="token string">'zhao'</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">110</span>    zhao    <span class="token number">12.60</span><span class="token number">2</span>    <span class="token number">120</span>    zhao    <span class="token number">12.90</span><span class="token number">3</span>   <span class="token number">555</span> zhao    <span class="token number">222.00</span></code></pre><p><a name="d45897e5"></a></p><h1 id="查，查询数据"><a href="#查，查询数据" class="headerlink" title="查，查询数据"></a>查，查询数据</h1><p><a name="4178536f"></a></p><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><p><a href="https://www.zhwei.cn/databases-mysql-singlQuery/">跳转 单表查询</a></p><p><a name="c7ccefc6"></a></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><a href="https://www.zhwei.cn/databases-mysql-manyQuery/">跳转 多表查询</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> databases </tag>
            
            <tag> 数据库 </tag>
            
            <tag> web </tag>
            
            <tag> sql增删改查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 教程：单表查询</title>
      <link href="/databases-mysql-singl-query/"/>
      <url>/databases-mysql-singl-query/</url>
      
        <content type="html"><![CDATA[<p><a name="3cb64573"></a></p><h1 id="创建数据库并插入数据"><a href="#创建数据库并插入数据" class="headerlink" title="创建数据库并插入数据"></a>创建数据库并插入数据</h1><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 创建表，数据类型请自行查询</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> fruits <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  sid <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  NAME CHAR<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  price <span class="token keyword">DECIMAL</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 表中插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> fruits<span class="token keyword">VALUES</span>  <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'blackberry'</span><span class="token punctuation">,</span> <span class="token number">10.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">'melon'</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">10.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'coconut'</span><span class="token punctuation">,</span> <span class="token number">9.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">'lemon'</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">'berry'</span><span class="token punctuation">,</span> <span class="token number">7.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token number">15.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="4178536f"></a></p><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><p><a name="9f380f34"></a></p><h2 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">101</span>    apple    <span class="token number">5.20</span><span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span><span class="token number">3</span>    <span class="token number">102</span>    orange    <span class="token number">11.20</span><span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">5</span>    <span class="token number">102</span>    banana    <span class="token number">10.30</span><span class="token number">6</span>    <span class="token number">102</span>    grape    <span class="token number">5.30</span><span class="token number">7</span>    <span class="token number">103</span>    coconut    <span class="token number">9.20</span><span class="token number">8</span>    <span class="token number">101</span>    cherry    <span class="token number">3.20</span><span class="token number">9</span>    <span class="token number">103</span>    apricot    <span class="token number">2.20</span><span class="token number">10</span>    <span class="token number">104</span>    lemon    <span class="token number">6.40</span><span class="token number">11</span>    <span class="token number">104</span>    berry    <span class="token number">7.60</span><span class="token number">12</span>    <span class="token number">106</span>    mango    <span class="token number">15.60</span></code></pre><p><a name="5fae6f01"></a></p><h2 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span>NAME <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span>ID    NAME<span class="token number">1</span>    apple<span class="token number">2</span>    blackberry<span class="token number">3</span>    orange<span class="token number">4</span>    melon<span class="token number">5</span>    banana<span class="token number">6</span>    grape<span class="token number">7</span>    coconut<span class="token number">8</span>    cherry<span class="token number">9</span>    apricot<span class="token number">10</span>    lemon<span class="token number">11</span>    berry<span class="token number">12</span>    mango</code></pre><p><a name="920db34f"></a></p><h2 id="查询指定条件的字段"><a href="#查询指定条件的字段" class="headerlink" title="查询指定条件的字段"></a>查询指定条件的字段</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'BANANA'</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">5</span>    <span class="token number">102</span>    banana    <span class="token number">10.30</span></code></pre><p><a name="a6bf5c47"></a></p><h2 id="带IN关键字的查询"><a href="#带IN关键字的查询" class="headerlink" title="带IN关键字的查询"></a>带IN关键字的查询</h2><p>IN关键字：IN(xx，yy，…) 满足条件范围内的一个值即为匹配项，括号内的值，或的关系</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> NAME <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'BANANA'</span><span class="token punctuation">,</span><span class="token string">'ORANGE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">3</span>    <span class="token number">102</span>    orange    <span class="token number">11.20</span><span class="token number">5</span>    <span class="token number">102</span>    banana    <span class="token number">10.30</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> ID <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">101</span>    apple    <span class="token number">5.20</span><span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span><span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">5</span>    <span class="token number">102</span>    banana    <span class="token number">10.30</span><span class="token number">6</span>    <span class="token number">102</span>    grape    <span class="token number">5.30</span><span class="token number">7</span>    <span class="token number">103</span>    coconut    <span class="token number">9.20</span><span class="token number">9</span>    <span class="token number">103</span>    apricot    <span class="token number">2.20</span><span class="token number">10</span>    <span class="token number">104</span>    lemon    <span class="token number">6.40</span><span class="token number">11</span>    <span class="token number">104</span>    berry    <span class="token number">7.60</span><span class="token number">12</span>    <span class="token number">106</span>    mango    <span class="token number">15.60</span></code></pre><p><a name="0e7df0eb"></a></p><h2 id="带BETWEEN-AND-的范围查询"><a href="#带BETWEEN-AND-的范围查询" class="headerlink" title="带BETWEEN AND 的范围查询"></a>带BETWEEN AND 的范围查询</h2><p>BETWEEN … AND … : 在…到…范围内的值即为匹配项</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> ID <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token operator">AND</span> <span class="token number">9</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">3</span>    <span class="token number">102</span>    orange    <span class="token number">11.20</span><span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">5</span>    <span class="token number">102</span>    banana    <span class="token number">10.30</span><span class="token number">6</span>    <span class="token number">102</span>    grape    <span class="token number">5.30</span><span class="token number">7</span>    <span class="token number">103</span>    coconut    <span class="token number">9.20</span><span class="token number">8</span>    <span class="token number">101</span>    cherry    <span class="token number">3.20</span><span class="token number">9</span>    <span class="token number">103</span>    apricot    <span class="token number">2.20</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> ID <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">11</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">101</span>    apple    <span class="token number">5.20</span><span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span><span class="token number">3</span>    <span class="token number">102</span>    orange    <span class="token number">11.20</span><span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">12</span>    <span class="token number">106</span>    mango    <span class="token number">15.60</span></code></pre><p><a name="818fed55"></a></p><h2 id="带LIKE的字符匹配查询"><a href="#带LIKE的字符匹配查询" class="headerlink" title="带LIKE的字符匹配查询"></a>带LIKE的字符匹配查询</h2><p>LIKE: 模糊查询，和LIKE一起使用的通配符有  “%”、”_”</p><table><thead><tr><th>通配符</th><th>功能</th></tr></thead><tbody><tr><td>“%”</td><td>作用是能匹配任意长度的字符。</td></tr><tr><td>“_”</td><td>只能匹配任意一个字符</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'black%'</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'b%y'</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span><span class="token number">11</span>    <span class="token number">104</span>    berry    <span class="token number">7.60</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'_ER_Y'</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">11</span>    <span class="token number">104</span>    berry    <span class="token number">7.60</span></code></pre><p><a name="6483b0de"></a></p><h1 id="逻辑与之带AND的多条件查询"><a href="#逻辑与之带AND的多条件查询" class="headerlink" title="逻辑与之带AND的多条件查询"></a>逻辑与之带AND的多条件查询</h1><p>and：同时满足条件</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span><span class="token keyword">FROM</span>  fruits<span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> sid <span class="token operator">></span> <span class="token number">102</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">10</span>    <span class="token number">104</span>    lemon    <span class="token number">6.40</span></code></pre><p><a name="0c255859"></a></p><h1 id="逻辑或之OR的多条件查询"><a href="#逻辑或之OR的多条件查询" class="headerlink" title="逻辑或之OR的多条件查询"></a>逻辑或之OR的多条件查询</h1><p>OR:有一个满足即可，类似in</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span><span class="token keyword">FROM</span>  fruits<span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">OR</span> sid <span class="token operator">></span> <span class="token number">102</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span><span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">6</span>    <span class="token number">102</span>    grape    <span class="token number">5.30</span><span class="token number">7</span>    <span class="token number">103</span>    coconut    <span class="token number">9.20</span><span class="token number">8</span>    <span class="token number">101</span>    cherry    <span class="token number">3.20</span><span class="token number">9</span>    <span class="token number">103</span>    apricot    <span class="token number">2.20</span><span class="token number">10</span>    <span class="token number">104</span>    lemon    <span class="token number">6.40</span><span class="token number">11</span>    <span class="token number">104</span>    berry    <span class="token number">7.60</span><span class="token number">12</span>    <span class="token number">106</span>    mango    <span class="token number">15.60</span></code></pre><p><a name="f7a4de5c"></a></p><h1 id="关键字DISTINCT查询不重复的数据"><a href="#关键字DISTINCT查询不重复的数据" class="headerlink" title="关键字DISTINCT查询不重复的数据"></a>关键字DISTINCT查询不重复的数据</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token keyword">DISTINCT</span> SID<span class="token keyword">FROM</span>  fruits<span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">OR</span> sid <span class="token operator">></span> <span class="token number">102</span><span class="token punctuation">;</span>SID<span class="token number">101</span><span class="token number">105</span><span class="token number">102</span><span class="token number">103</span><span class="token number">104</span><span class="token number">106</span></code></pre><p><a name="e955e677"></a></p><h1 id="ORDER-BY对查询的结果排序"><a href="#ORDER-BY对查询的结果排序" class="headerlink" title="ORDER BY对查询的结果排序"></a>ORDER BY对查询的结果排序</h1><p><a name="55a66792"></a></p><h2 id="ORDER-BY-字段-DESC-逆序排列"><a href="#ORDER-BY-字段-DESC-逆序排列" class="headerlink" title="ORDER BY 字段 DESC 逆序排列"></a>ORDER BY 字段 DESC 逆序排列</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>  SID<span class="token keyword">FROM</span>  fruits<span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">OR</span> sid <span class="token operator">></span> <span class="token number">102</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sid <span class="token keyword">DESC</span><span class="token punctuation">;</span>SID<span class="token number">106</span><span class="token number">105</span><span class="token number">104</span><span class="token number">103</span><span class="token number">102</span><span class="token number">101</span></code></pre><p><a name="f4ef5c03"></a></p><h2 id="ORDER-BY-字段-ASC-正序排列，默认为正"><a href="#ORDER-BY-字段-ASC-正序排列，默认为正" class="headerlink" title="ORDER BY 字段 ASC 正序排列，默认为正"></a>ORDER BY 字段 ASC 正序排列，默认为正</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>  SID<span class="token keyword">FROM</span>  fruits<span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">OR</span> sid <span class="token operator">></span> <span class="token number">102</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sid <span class="token keyword">ASC</span><span class="token punctuation">;</span>SID<span class="token number">101</span><span class="token number">102</span><span class="token number">103</span><span class="token number">104</span><span class="token number">105</span><span class="token number">106</span></code></pre><p><a name="a8aa86da"></a></p><h1 id="GROUP-BY-对查询结果进行分组"><a href="#GROUP-BY-对查询结果进行分组" class="headerlink" title="GROUP BY 对查询结果进行分组"></a>GROUP BY 对查询结果进行分组</h1><p><a name="c84edd03"></a></p><h2 id="不分组"><a href="#不分组" class="headerlink" title="不分组"></a>不分组</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> SID <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span>SID<span class="token number">101</span><span class="token number">101</span><span class="token number">102</span><span class="token number">105</span><span class="token number">102</span><span class="token number">102</span><span class="token number">103</span><span class="token number">101</span><span class="token number">103</span><span class="token number">104</span><span class="token number">104</span><span class="token number">106</span></code></pre><p><a name="c7a11bc9"></a></p><h2 id="将相同的内容分到同一个组里面"><a href="#将相同的内容分到同一个组里面" class="headerlink" title="将相同的内容分到同一个组里面"></a>将相同的内容分到同一个组里面</h2><blockquote><p>分组之后，重复的都被分到一组</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> SID <span class="token keyword">FROM</span> fruits <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> SID <span class="token punctuation">;</span>SID<span class="token number">101</span><span class="token number">102</span><span class="token number">105</span><span class="token number">103</span><span class="token number">104</span><span class="token number">106</span></code></pre><p><a name="4b3bf9cc"></a></p><h2 id="GROUP-CONCAT查看分组后的数目和内容"><a href="#GROUP-CONCAT查看分组后的数目和内容" class="headerlink" title="GROUP_CONCAT查看分组后的数目和内容"></a>GROUP_CONCAT查看分组后的数目和内容</h2><p>查看分组中的各个字段内容 GROUP_CONCAT( )</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> SID<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token punctuation">,</span>GROUP_CONCAT<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sid<span class="token punctuation">;</span>SID    <span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token number">101</span>    <span class="token number">3</span>    apple<span class="token punctuation">,</span>blackberry<span class="token punctuation">,</span>cherry<span class="token number">102</span>    <span class="token number">3</span>    orange<span class="token punctuation">,</span>banana<span class="token punctuation">,</span>grape<span class="token number">103</span>    <span class="token number">2</span>    coconut<span class="token punctuation">,</span>apricot<span class="token number">104</span>    <span class="token number">2</span>    lemon<span class="token punctuation">,</span>berry<span class="token number">105</span>    <span class="token number">1</span>    melon<span class="token number">106</span>    <span class="token number">1</span>    mango</code></pre><p><a name="cf7eeef3"></a></p><h2 id="HAVING条件过滤，相当于WHERE，只能分组用"><a href="#HAVING条件过滤，相当于WHERE，只能分组用" class="headerlink" title="HAVING条件过滤，相当于WHERE，只能分组用"></a>HAVING条件过滤，相当于WHERE，只能分组用</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> SID<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token punctuation">,</span>GROUP_CONCAT<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sid <span class="token keyword">HAVING</span> SID <span class="token operator">></span> <span class="token number">103</span><span class="token punctuation">;</span>SID    <span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token number">104</span>    <span class="token number">2</span>    lemon<span class="token punctuation">,</span>berry<span class="token number">105</span>    <span class="token number">1</span>    melon<span class="token number">106</span>    <span class="token number">1</span>    mango</code></pre><p><a name="6c4701bd"></a></p><h1 id="LIMIT-限制查询结果的数量"><a href="#LIMIT-限制查询结果的数量" class="headerlink" title="LIMIT 限制查询结果的数量"></a>LIMIT 限制查询结果的数量</h1><blockquote><p>LIMIT 位置偏移量,行数<br>默认位置偏移量为0，即第1行</p></blockquote><p>通过LIMIT可以选择数据库表中的任意行数，也就是不用从第一条记录开始遍历，可以直接拿到 第5条到第10条的记录，也可以直接拿到第12到第15条的记录。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> ID <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">101</span>    apple    <span class="token number">5.20</span><span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span><span class="token number">3</span>    <span class="token number">102</span>    orange    <span class="token number">11.20</span><span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">5</span>    <span class="token number">102</span>    banana    <span class="token number">10.30</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> ID <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">;</span>id    sid    name    price<span class="token number">6</span>    <span class="token number">102</span>    grape    <span class="token number">5.30</span><span class="token number">7</span>    <span class="token number">103</span>    coconut    <span class="token number">9.20</span><span class="token number">8</span>    <span class="token number">101</span>    cherry    <span class="token number">3.20</span><span class="token number">9</span>    <span class="token number">103</span>    apricot    <span class="token number">2.20</span><span class="token number">10</span>    <span class="token number">104</span>    lemon    <span class="token number">6.40</span><span class="token number">11</span>    <span class="token number">104</span>    berry    <span class="token number">7.60</span><span class="token number">12</span>    <span class="token number">106</span>    mango    <span class="token number">15.60</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> databases </tag>
            
            <tag> 数据库 </tag>
            
            <tag> web </tag>
            
            <tag> sql单表查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 教程：基础语句</title>
      <link href="/databases-mysql-base-sql/"/>
      <url>/databases-mysql-base-sql/</url>
      
        <content type="html"><![CDATA[<p><a name="6c182d8d"></a></p><h1 id="数据库基础操作"><a href="#数据库基础操作" class="headerlink" title="数据库基础操作"></a>数据库基础操作</h1><p><a name="2aae13df"></a></p><h2 id="开启MySQL服务"><a href="#开启MySQL服务" class="headerlink" title="开启MySQL服务"></a>开启MySQL服务</h2><pre class=" language-bash"><code class="language-bash">net start mysql</code></pre><p><a name="84e9143c"></a></p><h2 id="关闭MySQL服务"><a href="#关闭MySQL服务" class="headerlink" title="关闭MySQL服务"></a>关闭MySQL服务</h2><pre class=" language-bash"><code class="language-bash">net stop mysql</code></pre><p><a name="adc3184e"></a></p><h2 id="登陆MySQL"><a href="#登陆MySQL" class="headerlink" title="登陆MySQL"></a>登陆MySQL</h2><pre class=" language-bash"><code class="language-bash">mysql -u帐号　-p 输入密码mysql -uroot -p</code></pre><p><a name="43a4cf3e"></a></p><h2 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre><p><a name="cecae436"></a></p><h2 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h2><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">create</span> <span class="token keyword">database</span> zhao <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span></code></pre><p><a name="17d6bfc2"></a></p><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> ZHAO<span class="token punctuation">;</span></code></pre><p><a name="e9273484"></a></p><h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><p><a name="5d89fefc"></a></p><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><pre><code>格式：CREATE TABLE 数据表名(字段名1　　数据类型[列级别约束条件],字段名2　　数据类型[列级别约束条件],字段名3　　数据类型[列级别约束条件]);</code></pre><p>注意：格式不一定需要这样隔着写，完全可以全部写成一行。但是那样写可观性非常差。我这样写只是为了可以看的更清晰。</p><p>解释：1、[ ]中括号中的内容表示可以有可以没有，2、列级别这个“列”一定要搞清楚说的是什么，一张表中有行有列，列表示竖，行表示横　3、约束条件后面会讲到</p><p><a name="570b6fa5"></a></p><h2 id="创建没有约束的student表"><a href="#创建没有约束的student表" class="headerlink" title="创建没有约束的student表"></a>创建没有约束的student表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> age <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注释：SHOW TABLES 可以查询数据库底下的所有表。</p><p><a name="1afe2f93"></a></p><h2 id="创建有约束的student表"><a href="#创建有约束的student表" class="headerlink" title="创建有约束的student表"></a>创建有约束的student表</h2><ul><li>主键约束</li><li>外键约束</li><li>非空约束</li><li>唯一约束</li><li>默认约束</li><li>自动增加</li></ul><p><a name="26361348"></a></p><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p><strong>PRIMARY KEY(primary key)</strong></p><p>独一无二(唯一)和不能为空(非空)，通俗的讲，就是在表中增加记录时，在该字段下的数据不能重复，不能为空，比如以上面创建的表为例子，在表中增加两条记录，如果id字段用了主键约束。则id不能一样，并且不能为空。一般每张表中度有一个字段为主键，唯一标识这条记录。以后需要找到该条记录也可以同这个主键来确认记录，因为主键是唯一的，并且非空，一张表中每个记录的主键度不一样，所以根据主键也就能找到对应的记录。而不是多条重复的记录。如果没有主键，那么表中就会存在很多重复的记录，那么即浪费存储空间，在查询时也消耗更多资源。</p><p>一般被主键约束了的字段度习惯性的称该字段为该表的主键</p><p><strong>单字段主键约束</strong></p><p>两种方式都可以</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age  <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>多字段主键约束(复合主键)</strong></p><p>这个id和name都市主键，说明在以后增加的插入的记录中，id和name不能同时一样，比如说可以是这样。一条记录为id=1，name=yyy、另一条记录为：id=1，name=zzz。 这样是可以的。并不是你们所理解的两个字段分别度不可以相同。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>age  <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="499c95f9"></a></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>什么是外键举个例子就清楚了，有两张表，一张表是emp(员工)表，另一张表是dept(部门)表，一个员工属于一个部门，那么如何通过员工能让我们自己他在哪个部门呢？那就只能在员工表中增加一个字段，能代表员工所在的部门，那该字段就只能是存储dept中的主键了(因为主键是唯一的，才能确实是哪个部门，进而代表员工所在的部门，如果是部门名称，有些部门的名称可能是同名。就不能区分了。)，像这样的字段，就符合外键的特点，就可以使用外键约束，使该字段只能够存储另一张表的主键。如果不被外键约束，那么该字段就无法保证存储进来的值就一定是另一张表的主键值。</p><p><strong>外键约束的特点</strong></p><ol><li>外键约束可以描述任意一个字段(包括主键)，可以为空，并且一个表中可以有多个外键。但是外键字段中的值必须是另一张表中的主键。</li><li>这样被外键关联的两种表的关系可以称为父子表或者主从表。子表(从表)拥有外键字段的表，父表(主表)被外键字段所指向的表。</li><li>子表被外键约束修饰的字段必须和父表的主键字段的类型一样。</li></ol><p>注意：一个表中有被外键修饰的字段，就称该表有外键(是“有外键”。而不是“是外键”)，并会给该表中的外键约束取一个名称，所以我们常说的这个表有没有外键，指的不是被外键约束修饰的字段名，而是指这个表是否有存在外键约束。也就是说，不能说这个表的外键是xxx(该表中被外键约束修饰的字段名)，这种说法是错误的，但是大多数人已经习惯了这样，虽然影响不大，但是在很多时候需要理解一个东西时，会造成一定的困扰。</p><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">CONSTRAINT</span>　　外键名称　　<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>被外键约束的字段名称<span class="token punctuation">)</span>　　<span class="token keyword">REFERENCES</span>  主表名<span class="token punctuation">(</span>主键字段<span class="token punctuation">)</span>英文解释：<span class="token keyword">CONSTRAINT</span>:约束　　　　<span class="token keyword">REFERENCES</span>:参考</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> studentA <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  location <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> studentB <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  deptId <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> tableA_tableB_1 FOREIGH <span class="token keyword">KEY</span> <span class="token punctuation">(</span>deptId<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tableA <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：tableB中有一个名为tableA_tableB_1的外键关联了tableA和tableB两个表，被外键约束修饰的字段为tableB中的deptId，主键字段为tableA中的id</p><p><a name="e96c3ec1"></a></p><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p><strong>NOT NULL</strong></p><p>被该约束修饰了的字段，就不能为空，主键约束中就包括了这个约束</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> studentA <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  location <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="e70693bd"></a></p><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p><strong>UNIQUE</strong></p><p>被唯一约束修饰了的字段，表示该字段中的值唯一，不能有相同的值，通俗点讲，就好比插入两条记录，这两条记录中处于该字段的值不能是一样的。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> studentA <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>  location <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也就是说在插入的记录中，每条记录的name值不能是一样的。</p><p><a name="bae9105a"></a></p><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p><strong>Default</strong></p><p>指定这一列的默认值为多少，比如，男性同学比较多，性别就可以设置为默认男，如果插入一行记录时，性别没有填，那么就默认加上</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> studentA <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  eptId <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">1111</span><span class="token punctuation">,</span>  salary <span class="token keyword">FLOAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="f9f952f0"></a></p><h3 id="自动增加"><a href="#自动增加" class="headerlink" title="自动增加"></a>自动增加</h3><p><strong>AUTO_INCREMENT</strong></p><p>一个表只能一个字段使用AUTO_INCREMENT，并且使用这个约束的字段只能是整数类型(任意的整数类型     TINYINT,SMALLIN,INT,BIGINT)，默认值是1，也就是说从1开始增加的。一般就是给主键使用的，自动增加，使每个主键的值度不一样，并且不用我们自己管理，让主键自己自动生成</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> studentA <span class="token punctuation">(</span>  id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="b13411d7"></a></p><h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><p><a name="6d13e1b7"></a></p><h3 id="查看表基本结构语句"><a href="#查看表基本结构语句" class="headerlink" title="查看表基本结构语句"></a>查看表基本结构语句</h3><pre class=" language-sql"><code class="language-sql">格式<span class="token number">1</span>：<span class="token keyword">DESCRIBE</span> 表名<span class="token keyword">DESCRIBE</span>　student<span class="token punctuation">;</span>格式<span class="token number">2</span>：<span class="token keyword">DESC</span> 表名<span class="token keyword">DESC</span> student<span class="token punctuation">;</span></code></pre><p><a name="f821026d"></a></p><h3 id="查看创建表的语句"><a href="#查看创建表的语句" class="headerlink" title="查看创建表的语句"></a>查看创建表的语句</h3><pre class=" language-sql"><code class="language-sql">格式<span class="token number">1</span>：<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">;</span>格式<span class="token number">2</span>：<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名\G<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student\G<span class="token punctuation">;</span></code></pre><p><a name="dc15d5f9"></a></p><h2 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h2><p>修改数据表包括：对表中字段的增加、删除、修改。  在这个里面用的关键字为 ALTER</p><p><a name="9adf412d"></a></p><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>旧表名<span class="token operator">></span> <span class="token keyword">RENAME</span><span class="token punctuation">[</span><span class="token keyword">TO</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>新表名<span class="token operator">></span><span class="token punctuation">;</span>将student表名改为student1<span class="token punctuation">(</span>改完后在改回来<span class="token punctuation">)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> student1<span class="token punctuation">;</span></code></pre><p><a name="f1b0e939"></a></p><h3 id="修改表中的字段名"><a href="#修改表中的字段名" class="headerlink" title="修改表中的字段名"></a>修改表中的字段名</h3><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名<span class="token operator">></span> CHANGE<span class="token operator">&lt;</span>旧字段名<span class="token operator">></span><span class="token operator">&lt;</span>新字段名<span class="token operator">></span><span class="token operator">&lt;</span>新数据类型<span class="token operator">></span>将student表中的name字段名改为 username<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student CHANGE name username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：这个不仅能改变字段名，还能将字段的数据类型一并修改，也就是说，你可以单纯的只修改字段名，也可以单纯的只修改数据类型，也可以同时一起修改</p><p><a name="d6c757dd"></a></p><h3 id="修改表中的数据类型"><a href="#修改表中的数据类型" class="headerlink" title="修改表中的数据类型"></a>修改表中的数据类型</h3><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">MODIFY</span><span class="token operator">&lt;</span>字段名<span class="token operator">></span><span class="token operator">&lt;</span>数据类型<span class="token operator">></span>　　　　　　　　　　　　　<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：只能修改字段名的数据类型，但是其原理跟上面change做的事情一样，这里也有修改字段名的过程，只不过修改后的字段名和修改前的字段名相同，但是数据类型不一样。</p><p><a name="bbef47b6"></a></p><h3 id="修改字段的排列位置"><a href="#修改字段的排列位置" class="headerlink" title="修改字段的排列位置"></a>修改字段的排列位置</h3><pre class=" language-sql"><code class="language-sql">方式<span class="token number">1</span>：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">MODIFY</span><span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token operator">&lt;</span>数据类型<span class="token operator">></span> <span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AFTER</span> age<span class="token punctuation">;</span></code></pre><p>解释：将字段1的位置放到第一，或者放到指定字段2的后面</p><pre class=" language-sql"><code class="language-sql">方式<span class="token number">2</span>：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名<span class="token operator">></span> CHANGE<span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span><span class="token operator">&lt;</span>数据类型<span class="token operator">></span> <span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span><span class="token operator">&lt;</span>字段<span class="token number">3</span><span class="token operator">></span>　<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student CHANGE username username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AFTER</span> age<span class="token punctuation">;</span></code></pre><p>解释：其实是一样的，将是字段2覆盖字段1，然后在进行排序</p><p><strong>总结</strong></p><p>CHANGE和MODIFY的区别？</p><p>原理都是一样的，MODIFY只能修改数据类型，但是CHANGE能够修改数据类型和字段名，也就是说MODIFY是CHANGE的更具体化的一个操作。可能觉得用CHANGE只改变一个数据类型不太爽，就增加了一个能直接改数据类型的使用关键字MODIFY来操作。</p><p><a name="4484fa04"></a></p><h2 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h2><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名称<span class="token operator">></span> <span class="token keyword">ADD</span><span class="token operator">&lt;</span>新字段名<span class="token operator">></span><span class="token operator">&lt;</span>数据类型<span class="token operator">></span><span class="token punctuation">[</span>约束条件<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span><span class="token operator">&lt;</span>已存在的表名<span class="token operator">></span><span class="token punctuation">]</span>解释：在一个特定位置增加一个新的字段，如果不指定位置，默认是最后一个。<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">ADD</span> sex <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="1cfd4c81"></a></p><h2 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h2><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名称<span class="token operator">></span> <span class="token keyword">DROP</span><span class="token operator">&lt;</span>字段名<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">DROP</span> sex<span class="token punctuation">;</span></code></pre><p><a name="b47f56e0"></a></p><h2 id="删除表的外键约束"><a href="#删除表的外键约束" class="headerlink" title="删除表的外键约束"></a>删除表的外键约束</h2><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名称<span class="token operator">></span> <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token operator">&lt;</span>外键约束名<span class="token operator">></span></code></pre><p>注意：外键约束名 指的不是被外键约束修饰的字段名，切记，而是我们在创建外键约束关系时取的名字。</p><p><a name="0498ba16"></a></p><h2 id="更改表的存储引擎"><a href="#更改表的存储引擎" class="headerlink" title="更改表的存储引擎"></a>更改表的存储引擎</h2><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token operator">&lt;</span>更改后的存储引擎名<span class="token operator">></span></code></pre><p>这个存储引擎目前我自己也不太清楚，虽然知道有哪几种引擎，但是稍微深入一点就不清楚了，所以打算留到日后在说。</p><p><a name="0849f91a"></a></p><h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><p><a name="2fab1f77"></a></p><h2 id="删除无关联表"><a href="#删除无关联表" class="headerlink" title="删除无关联表"></a>删除无关联表</h2><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span><span class="token operator">&lt;</span>表名<span class="token operator">></span>；<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">;</span></code></pre><p><a name="8b4e771e"></a></p><h2 id="删除被其他表关联的主表"><a href="#删除被其他表关联的主表" class="headerlink" title="删除被其他表关联的主表"></a>删除被其他表关联的主表</h2><p>这个是比较重要的一点，在有外键关联关系的两张表中，如果删除主表，那么是删不掉的，并且会报错。因为有张表依赖于他。那怎么办呢？针对这种情况，总共有两种方法</p><ol><li>先删除你子表，然后在删除父表，这样就达到了删除父表的目的，但是子表也要被删除</li><li>先解除外键关系，然后在删除父表，这样也能达到目的，并且保留了子表，只删除我们不需要的父表。在3.7中就讲解了如何删除外键关系。</li></ol><p><a name="25f9c7fa"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>讲了这么多，但实际中，用到的并不是很多，特别是对表结构的修改的操作，在实际开发中，一般数据库表被定义下来了，就不会在修改了，发现数据库表设计的不好，也是将表全部删除，然后在重新创建过新表。但是在我们学习的过程中，这些操作还是很重要的，因为需要这些基础来学习后面更深入的东西，不可能因为实际中不用，就不学这不学那，要相信，不管做什么，那肯定是有意义的事情，可能那意义并不大，但是日后肯定会对我们有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> databases </tag>
            
            <tag> 数据库 </tag>
            
            <tag> web </tag>
            
            <tag> sql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 教程：多表查询</title>
      <link href="/databases-mysql-many-query/"/>
      <url>/databases-mysql-many-query/</url>
      
        <content type="html"><![CDATA[<p><a name="3cb64573"></a></p><h1 id="创建数据库并插入数据"><a href="#创建数据库并插入数据" class="headerlink" title="创建数据库并插入数据"></a>创建数据库并插入数据</h1><p><a name="cd857cef"></a></p><h2 id="表一，fruits，水果"><a href="#表一，fruits，水果" class="headerlink" title="表一，fruits，水果"></a>表一，fruits，水果</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 创建表，数据类型请自行查询</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> fruits <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  sid <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  NAME CHAR<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  price <span class="token keyword">DECIMAL</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 表中插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> fruits<span class="token keyword">VALUES</span>  <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'blackberry'</span><span class="token punctuation">,</span> <span class="token number">10.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">'melon'</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">10.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'coconut'</span><span class="token punctuation">,</span> <span class="token number">9.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">'lemon'</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">'berry'</span><span class="token punctuation">,</span> <span class="token number">7.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token number">15.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">'HHHHHH'</span><span class="token punctuation">,</span> <span class="token number">12.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="3317a667"></a></p><h2 id="表二，suppliers，供应商"><a href="#表二，suppliers，供应商" class="headerlink" title="表二，suppliers，供应商"></a>表二，suppliers，供应商</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> suppliers <span class="token punctuation">(</span>  sid <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  sName CHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  city CHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  zip CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  scall CHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> suppliers<span class="token keyword">VALUES</span>  <span class="token punctuation">(</span>    <span class="token number">101</span><span class="token punctuation">,</span>    <span class="token string">'Supplies A'</span><span class="token punctuation">,</span>    <span class="token string">'Tianjin'</span><span class="token punctuation">,</span>    <span class="token string">'400000'</span><span class="token punctuation">,</span>    <span class="token string">'18075'</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>    <span class="token number">102</span><span class="token punctuation">,</span>    <span class="token string">'Supplies B'</span><span class="token punctuation">,</span>    <span class="token string">'Chongqing'</span><span class="token punctuation">,</span>    <span class="token string">'400000'</span><span class="token punctuation">,</span>    <span class="token string">'44333'</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>    <span class="token number">103</span><span class="token punctuation">,</span>    <span class="token string">'Supplies C'</span><span class="token punctuation">,</span>    <span class="token string">'Shanghai'</span><span class="token punctuation">,</span>    <span class="token string">'400000'</span><span class="token punctuation">,</span>    <span class="token string">'90046'</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>    <span class="token number">104</span><span class="token punctuation">,</span>    <span class="token string">'Supplies D'</span><span class="token punctuation">,</span>    <span class="token string">'Zhongshan'</span><span class="token punctuation">,</span>    <span class="token string">'400000'</span><span class="token punctuation">,</span>    <span class="token string">'11111'</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>    <span class="token number">105</span><span class="token punctuation">,</span>    <span class="token string">'Supplies E'</span><span class="token punctuation">,</span>    <span class="token string">'Taiyuang'</span><span class="token punctuation">,</span>    <span class="token string">'400000'</span><span class="token punctuation">,</span>    <span class="token string">'22222'</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>    <span class="token number">106</span><span class="token punctuation">,</span>    <span class="token string">'Supplies F'</span><span class="token punctuation">,</span>    <span class="token string">'Beijing'</span><span class="token punctuation">,</span>    <span class="token string">'400000'</span><span class="token punctuation">,</span>    <span class="token string">'45678'</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>    <span class="token number">107</span><span class="token punctuation">,</span>    <span class="token string">'Supplies G'</span><span class="token punctuation">,</span>    <span class="token string">'Zhengzhou'</span><span class="token punctuation">,</span>    <span class="token string">'400000'</span><span class="token punctuation">,</span>    <span class="token string">'33332'</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="37722d2d"></a></p><h2 id="表3，顾客"><a href="#表3，顾客" class="headerlink" title="表3，顾客"></a>表3，顾客</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> people <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  num <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  CITY <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> people<span class="token keyword">VALUES</span>  <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'TIANJIN'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'BEIJING'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'NANCHANG'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token string">'NANJING'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'JIANGXI'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'SHENZHEN'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token string">'WUHAN'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token string">'GUANZHOU'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">'LIAONING'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="21ba516d"></a></p><h1 id="普通双表查询"><a href="#普通双表查询" class="headerlink" title="普通双表查询"></a>普通双表查询</h1><p>查询水果的供应商编码、名字即对应的水果名称和价格</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">f</span><span class="token punctuation">.</span>SID<span class="token punctuation">,</span>S<span class="token punctuation">.</span>SNAME<span class="token punctuation">,</span>F<span class="token punctuation">.</span>name<span class="token punctuation">,</span>F<span class="token punctuation">.</span>price <span class="token keyword">FROM</span> fruits <span class="token keyword">AS</span> <span class="token number">f</span> <span class="token punctuation">,</span>suppliers <span class="token keyword">AS</span> S <span class="token keyword">WHERE</span> F<span class="token punctuation">.</span>SID <span class="token operator">=</span>S<span class="token punctuation">.</span>SID<span class="token punctuation">;</span>SID    SNAME    name    price<span class="token number">101</span>    Supplies A    apple    <span class="token number">5.20</span><span class="token number">101</span>    Supplies A    blackberry    <span class="token number">10.20</span><span class="token number">102</span>    Supplies B    orange    <span class="token number">11.20</span><span class="token number">105</span>    Supplies E    melon    <span class="token number">8.20</span><span class="token number">102</span>    Supplies B    banana    <span class="token number">10.30</span><span class="token number">102</span>    Supplies B    grape    <span class="token number">5.30</span><span class="token number">103</span>    Supplies C    coconut    <span class="token number">9.20</span><span class="token number">101</span>    Supplies A    cherry    <span class="token number">3.20</span><span class="token number">103</span>    Supplies C    apricot    <span class="token number">2.20</span><span class="token number">104</span>    Supplies D    lemon    <span class="token number">6.40</span><span class="token number">104</span>    Supplies D    berry    <span class="token number">7.60</span><span class="token number">106</span>    Supplies F    mango    <span class="token number">15.60</span></code></pre><p><a name="301f3da4"></a></p><h1 id="内连接，两个表的公共部分"><a href="#内连接，两个表的公共部分" class="headerlink" title="内连接，两个表的公共部分"></a>内连接，两个表的公共部分</h1><p>格式：表名 (INNER) JOIN 表名 ON 连接条件</p><p><a name="b889a854"></a></p><h2 id="双表内连接查询"><a href="#双表内连接查询" class="headerlink" title="双表内连接查询"></a>双表内连接查询</h2><p>查询水果的供应商编码、名字、城市即对应的水果名称和价格</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">f</span><span class="token punctuation">.</span>SID<span class="token punctuation">,</span>S<span class="token punctuation">.</span>SNAME<span class="token punctuation">,</span>F<span class="token punctuation">.</span>name<span class="token punctuation">,</span>F<span class="token punctuation">.</span>price<span class="token punctuation">,</span>s<span class="token punctuation">.</span>city <span class="token keyword">FROM</span> fruits <span class="token keyword">AS</span> <span class="token number">f</span> <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> suppliers <span class="token keyword">AS</span> S <span class="token keyword">ON</span> F<span class="token punctuation">.</span>SID <span class="token operator">=</span>S<span class="token punctuation">.</span>SID<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token number">f</span><span class="token punctuation">.</span>SID<span class="token punctuation">,</span>S<span class="token punctuation">.</span>SNAME<span class="token punctuation">,</span>F<span class="token punctuation">.</span>name<span class="token punctuation">,</span>F<span class="token punctuation">.</span>price<span class="token punctuation">,</span>s<span class="token punctuation">.</span>city <span class="token keyword">FROM</span> fruits <span class="token keyword">AS</span> <span class="token number">f</span> <span class="token keyword">JOIN</span> suppliers <span class="token keyword">AS</span> S <span class="token keyword">ON</span> F<span class="token punctuation">.</span>SID <span class="token operator">=</span>S<span class="token punctuation">.</span>SID<span class="token punctuation">;</span>SID    SNAME    name    price    city<span class="token number">101</span>    Supplies A    apple    <span class="token number">5.20</span>    Tianjin<span class="token number">101</span>    Supplies A    blackberry    <span class="token number">10.20</span>    Tianjin<span class="token number">102</span>    Supplies B    orange    <span class="token number">11.20</span>    Chongqing<span class="token number">105</span>    Supplies E    melon    <span class="token number">8.20</span>    Taiyuang<span class="token number">102</span>    Supplies B    banana    <span class="token number">10.30</span>    Chongqing<span class="token number">102</span>    Supplies B    grape    <span class="token number">5.30</span>    Chongqing<span class="token number">103</span>    Supplies C    coconut    <span class="token number">9.20</span>    Shanghai<span class="token number">101</span>    Supplies A    cherry    <span class="token number">3.20</span>    Tianjin<span class="token number">103</span>    Supplies C    apricot    <span class="token number">2.20</span>    Shanghai<span class="token number">104</span>    Supplies D    lemon    <span class="token number">6.40</span>    Zhongshan<span class="token number">104</span>    Supplies D    berry    <span class="token number">7.60</span>    Zhongshan<span class="token number">106</span>    Supplies F    mango    <span class="token number">15.60</span>    Beijing</code></pre><p>发现和上面普通查询一样</p><p><a name="dfe513ee"></a></p><h2 id="自连接查询，即双表是同一张表"><a href="#自连接查询，即双表是同一张表" class="headerlink" title="自连接查询，即双表是同一张表"></a>自连接查询，即双表是同一张表</h2><p>查询供应id为2的水果供应商提供的其他水果名称</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">f2</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>F2<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">f2</span><span class="token punctuation">.</span>sid <span class="token keyword">FROM</span> fruits <span class="token keyword">AS</span> <span class="token number">f1</span> <span class="token keyword">JOIN</span> fruits <span class="token keyword">AS</span> F2 <span class="token keyword">ON</span> <span class="token number">f1</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> <span class="token number">f2</span><span class="token punctuation">.</span>sid <span class="token operator">AND</span> <span class="token number">f1</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>id    name    sid<span class="token number">1</span>    apple    <span class="token number">101</span><span class="token number">2</span>    blackberry    <span class="token number">101</span><span class="token number">8</span>    cherry    <span class="token number">101</span></code></pre><p>查询条件为表1，查询字段为表2</p><p><a name="e74aabfc"></a></p><h2 id="通过子句查询进行内链接"><a href="#通过子句查询进行内链接" class="headerlink" title="通过子句查询进行内链接"></a>通过子句查询进行内链接</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> fruits<span class="token punctuation">.</span>id<span class="token punctuation">,</span>fruits<span class="token punctuation">.</span>name<span class="token punctuation">,</span>fruits<span class="token punctuation">.</span>sid <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> fruits<span class="token punctuation">.</span>SID <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> fruits<span class="token punctuation">.</span>SID <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> fruits<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>id    name    sid<span class="token number">1</span>    apple    <span class="token number">101</span><span class="token number">2</span>    blackberry    <span class="token number">101</span><span class="token number">8</span>    cherry    <span class="token number">101</span></code></pre><p><a name="3f1b8d7a"></a></p><h1 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h1><p><a name="811ef322"></a></p><h2 id="左外连接，左表全部和左右表公共部分集合"><a href="#左外连接，左表全部和左右表公共部分集合" class="headerlink" title="左外连接，左表全部和左右表公共部分集合"></a>左外连接，左表全部和左右表公共部分集合</h2><p>格式： 表名 LEFT (OUTER) JOIN 表名 ON 条件</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># SUPPLIERS 为左表，显示全部内容</span><span class="token comment" spellcheck="true"># FRUITS 为右表，显示与左表公共部分</span><span class="token comment" spellcheck="true"># 右表其他内容显示为空，NULL</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>sid<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sname<span class="token punctuation">,</span><span class="token number">f</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token number">f</span><span class="token punctuation">.</span>name <span class="token keyword">FROM</span> suppliers <span class="token keyword">AS</span> s <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> fruits <span class="token keyword">AS</span> <span class="token number">f</span> <span class="token keyword">ON</span> <span class="token number">f</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> s<span class="token punctuation">.</span>sid <span class="token punctuation">;</span>sid    sname    id    name<span class="token number">101</span>    Supplies A    <span class="token number">1</span>    apple<span class="token number">101</span>    Supplies A    <span class="token number">2</span>    blackberry<span class="token number">102</span>    Supplies B    <span class="token number">3</span>    orange<span class="token number">105</span>    Supplies E    <span class="token number">4</span>    melon<span class="token number">102</span>    Supplies B    <span class="token number">5</span>    banana<span class="token number">102</span>    Supplies B    <span class="token number">6</span>    grape<span class="token number">103</span>    Supplies C    <span class="token number">7</span>    coconut<span class="token number">101</span>    Supplies A    <span class="token number">8</span>    cherry<span class="token number">103</span>    Supplies C    <span class="token number">9</span>    apricot<span class="token number">104</span>    Supplies D    <span class="token number">10</span>    lemon<span class="token number">104</span>    Supplies D    <span class="token number">11</span>    berry<span class="token number">106</span>    Supplies F    <span class="token number">12</span>    mango<span class="token number">107</span>    Supplies G    <span class="token boolean">NULL</span>  <span class="token boolean">NULL</span></code></pre><p><a name="9da13b9e"></a></p><h2 id="右外连接，右表全部和左右表公共部分集合"><a href="#右外连接，右表全部和左右表公共部分集合" class="headerlink" title="右外连接，右表全部和左右表公共部分集合"></a>右外连接，右表全部和左右表公共部分集合</h2><blockquote><p>与左外连接相似,就是全部显示右表及公共部分</p></blockquote><p>格式： 表名 RIGHT (OUTER) JOIN 表名 ON 条件</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># SUPPLIERS 为左表，显示与右表公共部分</span><span class="token comment" spellcheck="true"># FRUITS 为右表，显示全部内容</span><span class="token comment" spellcheck="true"># 左表其他内容显示为空，NULL</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>sid<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sname<span class="token punctuation">,</span><span class="token number">f</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token number">f</span><span class="token punctuation">.</span>name <span class="token keyword">FROM</span> suppliers <span class="token keyword">AS</span> s <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> fruits <span class="token keyword">AS</span> <span class="token number">f</span> <span class="token keyword">ON</span> <span class="token number">f</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> s<span class="token punctuation">.</span>sid <span class="token punctuation">;</span>sid    sname    id    name<span class="token number">101</span>    Supplies A    <span class="token number">1</span>    apple<span class="token number">101</span>    Supplies A    <span class="token number">2</span>    blackberry<span class="token number">102</span>    Supplies B    <span class="token number">3</span>    orange<span class="token number">105</span>    Supplies E    <span class="token number">4</span>    melon<span class="token number">102</span>    Supplies B    <span class="token number">5</span>    banana<span class="token number">102</span>    Supplies B    <span class="token number">6</span>    grape<span class="token number">103</span>    Supplies C    <span class="token number">7</span>    coconut<span class="token number">101</span>    Supplies A    <span class="token number">8</span>    cherry<span class="token number">103</span>    Supplies C    <span class="token number">9</span>    apricot<span class="token number">104</span>    Supplies D    <span class="token number">10</span>    lemon<span class="token number">104</span>    Supplies D    <span class="token number">11</span>    berry<span class="token number">106</span>    Supplies F    <span class="token number">12</span>    mango<span class="token boolean">NULL</span>  <span class="token boolean">NULL</span>    <span class="token number">13</span>    HHHHHH</code></pre><p><a name="8f5c198c"></a></p><h1 id="三表查询"><a href="#三表查询" class="headerlink" title="三表查询"></a>三表查询</h1><ul><li>表一和表二<code>sid</code>关联</li><li>表一和表三<code>id</code>关联</li></ul><p>查询供应商Supplies B供应的水果顾客购买量</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  s<span class="token punctuation">.</span>city<span class="token punctuation">,</span>  s<span class="token punctuation">.</span>sName<span class="token punctuation">,</span>  <span class="token number">f</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>  p<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span>  p<span class="token punctuation">.</span>num<span class="token keyword">FROM</span>  fruits <span class="token keyword">AS</span> F  <span class="token keyword">JOIN</span> suppliers <span class="token keyword">AS</span> s    <span class="token keyword">ON</span> <span class="token number">f</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> s<span class="token punctuation">.</span>sid    <span class="token operator">AND</span> s<span class="token punctuation">.</span>sName <span class="token operator">=</span> <span class="token string">'Supplies B'</span>  <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> people <span class="token keyword">AS</span> p    <span class="token keyword">ON</span> <span class="token number">f</span><span class="token punctuation">.</span>id <span class="token operator">=</span> p<span class="token punctuation">.</span>id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> p<span class="token punctuation">.</span>num <span class="token keyword">DESC</span><span class="token punctuation">;</span>city    sName    name    NAME    numChongqing    Supplies B    banana    E    <span class="token number">56</span>Chongqing    Supplies B    grape    F    <span class="token number">15</span>Chongqing    Supplies B    orange    C    <span class="token number">3</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> databases </tag>
            
            <tag> 数据库 </tag>
            
            <tag> web </tag>
            
            <tag> sql多表查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 教程：聚合函数</title>
      <link href="/databases-mysql-aggregate-function/"/>
      <url>/databases-mysql-aggregate-function/</url>
      
        <content type="html"><![CDATA[<p><a name="71cc4c7f"></a></p><h1 id="聚合函数特点"><a href="#聚合函数特点" class="headerlink" title="聚合函数特点"></a>聚合函数特点</h1><ol><li>组函数，将字段当作一个组进行统计，可结合分组<code>GROUP BY</code>联合使用</li><li>不用<code>GROUP BY</code>，中间结果集中的所有行自动形成一组，然后计算组合数</li><li>每个组函数接收一个参数（字段名或者表达式） 统计结果中默认忽略字段为<code>NULL</code>的记录，不参与计算</li><li>要想列值为<code>NULL</code>的行也参与组函数的计算，必须使用<code>IFNULL</code>函数对<code>NULL</code>值做转换。</li><li>不允许出现嵌套 比如<code>sum(max(...))</code></li></ol><p><a name="2d711b09"></a></p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span>id    sid    name    price<span class="token number">1</span>    <span class="token number">101</span>    apple    <span class="token number">5.20</span><span class="token number">2</span>    <span class="token number">101</span>    blackberry    <span class="token number">10.20</span><span class="token number">3</span>    <span class="token number">102</span>    orange    <span class="token number">11.20</span><span class="token number">4</span>    <span class="token number">105</span>    melon    <span class="token number">8.20</span><span class="token number">5</span>    <span class="token number">102</span>    banana    <span class="token number">10.30</span><span class="token number">6</span>    <span class="token number">102</span>    grape    <span class="token number">5.30</span><span class="token number">7</span>    <span class="token number">103</span>    coconut    <span class="token number">9.20</span><span class="token number">8</span>    <span class="token number">101</span>    cherry    <span class="token number">3.20</span><span class="token number">9</span>    <span class="token number">103</span>    apricot    <span class="token number">2.20</span><span class="token number">10</span>    <span class="token number">104</span>    lemon    <span class="token number">6.40</span><span class="token number">11</span>    <span class="token number">104</span>    berry    <span class="token number">7.60</span><span class="token number">12</span>    <span class="token number">106</span>    mango    <span class="token number">15.60</span></code></pre><p><a name="ee828f04"></a></p><h1 id="COUNT-统计行的数量。非NULL值"><a href="#COUNT-统计行的数量。非NULL值" class="headerlink" title="COUNT(*) 统计行的数量。非NULL值"></a>COUNT(*) 统计行的数量。非NULL值</h1><p><a name="0784c2bb"></a></p><h2 id="统计id和sid-的行数"><a href="#统计id和sid-的行数" class="headerlink" title="统计id和sid 的行数"></a>统计id和sid 的行数</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span><span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token function">count</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token number">12</span>    <span class="token number">12</span></code></pre><p><a name="08ab268e"></a></p><h2 id="统计当sid为103时id的行数"><a href="#统计当sid为103时id的行数" class="headerlink" title="统计当sid为103时id的行数"></a>统计当sid为103时id的行数</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> SID <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span><span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token number">2</span></code></pre><p><a name="6f40e06e"></a></p><h2 id="DISTINCT-过滤掉重复行"><a href="#DISTINCT-过滤掉重复行" class="headerlink" title="DISTINCT 过滤掉重复行"></a>DISTINCT 过滤掉重复行</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>Sid<span class="token punctuation">)</span> <span class="token keyword">AS</span> SID <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span>SID<span class="token number">12</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> Sid<span class="token punctuation">)</span> <span class="token keyword">AS</span> SID <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span>SID<span class="token number">6</span></code></pre><p><a name="a8cf1578"></a></p><h1 id="MAX-最大值"><a href="#MAX-最大值" class="headerlink" title="MAX(*) 最大值"></a>MAX(*) 最大值</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span><span class="token function">max</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token number">12</span></code></pre><p><a name="1a441977"></a></p><h1 id="MIN-最小值"><a href="#MIN-最小值" class="headerlink" title="MIN(*) 最小值"></a>MIN(*) 最小值</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span><span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token number">1</span></code></pre><p><a name="714b468f"></a></p><h1 id="AVG-平均值"><a href="#AVG-平均值" class="headerlink" title="AVG(*) 平均值"></a>AVG(*) 平均值</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> ID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token number">8.866667</span></code></pre><p><a name="6ecc704c"></a></p><h1 id="SUM-累加和"><a href="#SUM-累加和" class="headerlink" title="SUM(*) 累加和"></a>SUM(*) 累加和</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> SID <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span><span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token number">26.80</span></code></pre><p><a name="6378002c"></a></p><h1 id="GROUP-BY-组合使用"><a href="#GROUP-BY-组合使用" class="headerlink" title="GROUP BY 组合使用"></a>GROUP BY 组合使用</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token function">MAX</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">MIN</span><span class="token punctuation">(</span>SID<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">COUNT</span><span class="token punctuation">(</span>SID<span class="token punctuation">)</span><span class="token punctuation">,</span>  GROUP_CONCAT<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">AVG</span><span class="token punctuation">(</span>PRICE<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">SUM</span><span class="token punctuation">(</span>PRICE<span class="token punctuation">)</span><span class="token keyword">FROM</span>  fruits<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> SID<span class="token punctuation">;</span><span class="token function">MAX</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span>    <span class="token function">MIN</span><span class="token punctuation">(</span>SID<span class="token punctuation">)</span>    <span class="token function">COUNT</span><span class="token punctuation">(</span>SID<span class="token punctuation">)</span>    group_concat<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span>    <span class="token function">AVG</span><span class="token punctuation">(</span>PRICE<span class="token punctuation">)</span>    <span class="token function">SUM</span><span class="token punctuation">(</span>PRICE<span class="token punctuation">)</span><span class="token number">8</span>    <span class="token number">101</span>    <span class="token number">3</span>    apple<span class="token punctuation">,</span>blackberry<span class="token punctuation">,</span>cherry    <span class="token number">6.200000</span>    <span class="token number">18.60</span><span class="token number">6</span>    <span class="token number">102</span>    <span class="token number">3</span>    orange<span class="token punctuation">,</span>banana<span class="token punctuation">,</span>grape    <span class="token number">8.933333</span>    <span class="token number">26.80</span><span class="token number">9</span>    <span class="token number">103</span>    <span class="token number">2</span>    coconut<span class="token punctuation">,</span>apricot    <span class="token number">5.700000</span>    <span class="token number">11.40</span><span class="token number">11</span>    <span class="token number">104</span>    <span class="token number">2</span>    lemon<span class="token punctuation">,</span>berry    <span class="token number">7.000000</span>    <span class="token number">14.00</span><span class="token number">4</span>    <span class="token number">105</span>    <span class="token number">1</span>    melon    <span class="token number">8.200000</span>    <span class="token number">8.20</span><span class="token number">12</span>    <span class="token number">106</span>    <span class="token number">1</span>    mango    <span class="token number">15.600000</span>    <span class="token number">15.60</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> databases </tag>
            
            <tag> 数据库 </tag>
            
            <tag> web </tag>
            
            <tag> sql聚合函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 使用 Selenium，设置浏览器不弹窗，下载文件到指定位置</title>
      <link href="/python-selenium-download/"/>
      <url>/python-selenium-download/</url>
      
        <content type="html"><![CDATA[<p><a name="TuZDy"></a></p><h1 id="Firefox-文件下载"><a href="#Firefox-文件下载" class="headerlink" title="Firefox 文件下载"></a>Firefox 文件下载</h1><p><strong>_ 设置其Profile：_</strong></p><ul><li><code>browser.download.dir</code>：指定下载路径</li><li><code>browser.download.folderList</code>：自定义下载路径为2；下载到桌面为0；下载到默认路径为1</li><li><code>browser.download.manager.showWhenStarting</code>：在开始下载时，是否显示下载管理器</li><li><code>browser.helperApps.neverAsk.saveToDisk</code>：对所给出文件类型不再弹出框进行询问，需指定类型</li></ul><p>下面来个示例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python</span><span class="token comment" spellcheck="true"># coding: utf-8 </span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time profile <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>FirefoxProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>profile<span class="token punctuation">.</span>set_preference<span class="token punctuation">(</span><span class="token string">'browser.download.dir'</span><span class="token punctuation">,</span> <span class="token string">'d:\\'</span><span class="token punctuation">)</span>profile<span class="token punctuation">.</span>set_preference<span class="token punctuation">(</span><span class="token string">'browser.download.folderList'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>profile<span class="token punctuation">.</span>set_preference<span class="token punctuation">(</span><span class="token string">'browser.download.manager.showWhenStarting'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>profile<span class="token punctuation">.</span>set_preference<span class="token punctuation">(</span><span class="token string">'browser.helperApps.neverAsk.saveToDisk'</span><span class="token punctuation">,</span> <span class="token string">'application/vnd.ms-excel'</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span>firefox_profile<span class="token operator">=</span>profile<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhwei.cn/'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//a[text()="test.xlsx"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Firefox需要针对每种文件类型进行设置，这里需要我们查询对应文件的MIME类型，可以用以下链接进行查询：<a href="http://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener">MIME 参考手册</a></p><p><a name="0b813998"></a></p><h1 id="Chrome-文件下载"><a href="#Chrome-文件下载" class="headerlink" title="Chrome 文件下载"></a>Chrome 文件下载</h1><p><strong>_ 设置其options：_</strong></p><ul><li><code>download.default_directory</code>：设置下载路径</li><li><code>profile.default_content_settings.popups</code>：设置为 0 禁止弹出窗口</li></ul><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python</span><span class="token comment" spellcheck="true"># coding: utf-8 </span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time  options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>prefs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'profile.default_content_settings.popups'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'download.default_directory'</span><span class="token punctuation">:</span> <span class="token string">'d:\\'</span><span class="token punctuation">}</span>options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'prefs'</span><span class="token punctuation">,</span> prefs<span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'D:\\chromedriver.exe'</span><span class="token punctuation">,</span> chrome_options<span class="token operator">=</span>options<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhwei.cn/'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//a[text()="test.xlsx"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
            <tag> webdriver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 使用 Selenium，xpath 和 css 对比，以及 xpath 模糊定位，适用于动态 id、class 变化的属性</title>
      <link href="/python-selenium-xpath-css/"/>
      <url>/python-selenium-xpath-css/</url>
      
        <content type="html"><![CDATA[<p><a name="0a132d89"></a></p><h1 id="css定位方式相比xpath的优势"><a href="#css定位方式相比xpath的优势" class="headerlink" title="css定位方式相比xpath的优势"></a>css定位方式相比xpath的优势</h1><ul><li>优势 1：一般情况下定位速度要比 XPATH 快</li><li>优势 2：语法要比 XPATH更简洁</li></ul><p><a name="CSS"></a></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><table><thead><tr><th>用法</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>通用元素选择器，匹配任何元素</td></tr><tr><td>E</td><td>标签选择器，匹配所有使用 E标签的元素</td></tr><tr><td>.info</td><td>class选择器，匹配所有 class属性中包含 info的元素</td></tr><tr><td>#footer</td><td>id选择器，匹配所有id属性等于 footer的元素</td></tr><tr><td>E,F</td><td>多元素选择器，同时匹配所有 E元素或 F元素，E和 F之间用逗号分隔</td></tr><tr><td>E F</td><td>后代元素选择器，匹配所有属于 E元素后代的 F元素，E和 F之间用空格分隔</td></tr><tr><td>E &gt; F</td><td>子元素选择器，匹配所有 E元素的子元素 F</td></tr><tr><td>E + F</td><td>毗邻元素选择器，匹配紧随 E元素之后的同级元素 F （只匹配第一个）</td></tr><tr><td>E ~ F</td><td>同级元素选择器，匹配所有在 E元素之后的同级 F 元素</td></tr><tr><td>E[att=’val’]</td><td>属性 att的值为 val 的E 元素 （区分大小写）</td></tr><tr><td>E[att^=’val’]</td><td>属性 att的值以 val 开头的E 元素 （区分大小写）</td></tr><tr><td>E[att$=’val’]</td><td>属性 att的值以 val 结尾的E 元素 （区分大小写）</td></tr><tr><td>E[att*=’val’]</td><td>属性 att的值包含 val 的E 元素 （区分大小写）</td></tr><tr><td>E[att1=’v1’][att2*=’v2’]</td><td>属性 att1的值为 v1，att2的值包含 v2 （区分大小写）</td></tr><tr><td>E:contains(‘xxxx’)</td><td>内容中包含 xxxx 的 E元素</td></tr><tr><td>E:not(s)</td><td>匹配不符合当前选择器的任何元素</td></tr></tbody></table><p><strong>举例</strong></p><table><thead><tr><th>匹配(去掉#)</th><th>locator</th></tr></thead><tbody><tr><td>&lt;#div class=”formdiv”&gt;</td><td>css=div<br /> css=div.formdiv</td></tr><tr><td>&lt;#ul id=”recordlist”&gt;</td><td>css=#recordlist <br /> css=ul#recordlist</td></tr><tr><td>&lt;#p&gt;Heading</td><td>css=div.subdiv p <br /> css=div.subdiv &gt; ul &gt; p</td></tr><tr><td>&lt;#div class=”subdiv”&gt;</td><td>css=form + div</td></tr><tr><td>&lt;#li&gt;Cat</td><td>css=p + li <br /> css=p ~ li</td></tr><tr><td>&lt;#input name=”username”&gt;</td><td>css=form &gt; input[name=username]</td></tr><tr><td>&lt;#input value=”SYS123456” name=”vid” type=”hidden”&gt;</td><td>css=input[name$=id][value^=SYS]</td></tr><tr><td>&lt;#input name=”username” type=”text”&gt;</td><td>css=input:not([name$=id][value^=SYS])</td></tr><tr><td>&lt;#li&gt;Goat</td><td>css=li:contains(‘Goa’)</td></tr><tr><td>&lt;#li&gt;Cat</td><td>css=li:not(contains(‘Goa’))</td></tr></tbody></table><p><a name="6bf1c105"></a></p><h2 id="CSS和xpath对比"><a href="#CSS和xpath对比" class="headerlink" title="CSS和xpath对比"></a>CSS和xpath对比</h2><table><thead><tr><th>目标</th><th>CSS</th><th>XPath</th></tr></thead><tbody><tr><td>所有元素</td><td>*</td><td>//*</td></tr><tr><td>所有的 P 元素</td><td>p</td><td>//p</td></tr><tr><td>所有的 p 元素的子元素</td><td>p &gt; *</td><td>//p/*</td></tr><tr><td>根据 ID获取元素</td><td>#foo</td><td>//*[@id=’foo’]</td></tr><tr><td>根据 Class获取元素</td><td>.foo</td><td>//<em>[contains(@class,’foo’)] <br /> //</em>[@class=’foo’]</td></tr><tr><td>拥有某个属性的元素</td><td>*[title]</td><td>//*[@title]</td></tr><tr><td>所有 P元素的第一个子元素</td><td>p &gt; *:first-child</td><td>//p/*[0]</td></tr><tr><td>所有拥有子元素 a 的 P 元素</td><td>无法实现</td><td>//p[a]</td></tr><tr><td>下一个兄弟元素</td><td>p + *</td><td>//p/following-sibling::*[0]</td></tr><tr><td>标签</td><td>div</td><td>//div</td></tr><tr><td>By id</td><td>div#eleid</td><td>//div[@id=’eleid’]</td></tr><tr><td>By class</td><td>div.eleclass</td><td>//div[contains(@class,’eleclass’)] <br /> //div[@class=’eleclass’]</td></tr><tr><td>By 属性</td><td>//div[@title=’Move mouse here’]</td><td>div[title=Move mousehere] <br /> div[title^=Move] <br /> div[title$=here] <br /> div[title*=mouse]</td></tr><tr><td>定位子元素</td><td>div#eleid &gt;* <br /> div#eleid &gt;h1</td><td>//div[@id=’eleid’]/* <br /> //div/h1</td></tr><tr><td>定位后代元素</td><td>div h1</td><td>//div[@id=’eleid’]//h1</td></tr><tr><td>By index</td><td>li:nth(5)</td><td>//li[6]</td></tr><tr><td>By content</td><td>a:contains(Issue1164)</td><td>//a[contains(.,’Issue 1164’)]</td></tr><tr><td>根据子元素回溯定位父元素</td><td>li{a:contains(Issue1244)} <br /> ul{a:contains(Issue1244)}</td><td>//li[a[contains(.,’Issue 1244’)]] <br /> //*[./a[contains(.,’Issue1244’)]] <br /> //ul[.//a[contains(.,’Issue1244’)]]</td></tr><tr><td>根据邻近元素定位</td><td>css=li:contains(Issue1244) + li <br /> css=ul{a:contains(Issue1244)} ~ ul</td><td>//li[preceding-sibling::li[contains(.,’Issue1244’)]] <br /> //ul[preceding-sibling::ul[.//a[contains(.,’Issue1244’)]]]</td></tr></tbody></table><p><a name="6e547eda"></a></p><h1 id="xpath-定位模糊搜索"><a href="#xpath-定位模糊搜索" class="headerlink" title="xpath 定位模糊搜索"></a>xpath 定位模糊搜索</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding: utf-8</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token triple-quoted-string string">"""xpath 模糊匹配，类似find_by_partial_linkcontains(属性名，字符串)  包含，starts-with(属性名，字符串）  开始，ends-with(属性名，字符串）  结束,matchs(属性名，字符串）  匹配"""</span>driver<span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># xpath 模糊匹配</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[contains(@name,'tj_trhao123')]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># xpath 模糊匹配某个属性</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[contains(@id,'search-input')]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>u<span class="token string">"xpath 模糊搜索"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># xpath 模糊匹配以什么开头</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[starts-with(@id,'search-in')]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>u<span class="token string">"-- 开头"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># xpath 模糊匹配以什么结束</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[ends-with(@id,'search-input')]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>u<span class="token string">"-- 结束"</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">*</span>contains<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 如果a中含有字符串b，则返回true，否则返回falsestarts<span class="token operator">-</span><span class="token keyword">with</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 如果a是以字符串b开头，返回true，否则返回falseends<span class="token operator">-</span><span class="token keyword">with</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 如果a是以字符串b结尾，返回true，否则返回false<span class="token operator">**</span><span class="token operator">*</span><span class="token comment" spellcheck="true"># xpath 模糊匹配支持正则表达式</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[matchs(text(),'hao123')]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[contains(.,'hao123')]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
            <tag> webdriver </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
